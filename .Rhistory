Master_df$rad.abn [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" | Master_df$Radiology.Result == "Non-TB Abnormality"] <- "1"
Master_df$rad.abn [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
names(Master_df)
SymptomData <- read_excel("DataWrangling/ScreeningData.xlsx")
Master_df <- merge(Master_df, SymptomData, by.x = "PID_OMRS", by.y = "OpenMRS Identification Number", all.x = TRUE)
names(Master_df)
Master_df <- Master_df %>% filter(Age >= 5 & Age <=15)
table(Master_df$Result.Year, Master_df$Xpert2Outcome_num)
Master_df$PID_OMRS[Master_df$Xpert2Outcome_num %in% "1"]
write.csv(Master_df, "C:/Users/zhizh/Stop TB Partnership/Digital AI Team - Documents/AI Team/1.3. Manuscripts/2.2. Children/BGD Children/00_Input_Data/Master_df.csv", row.names = FALSE)
# Model the effect
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/CAD_Xpert.csv")
names(MDF)
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/CAD_Xpert.csv")
# names(MDF)
# write.csv(MDF[, c(1, 13, 28)], "2.0 Version Comparison/Q2.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 29)], "2.0 Version Comparison/Q3.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 26)], "2.0 Version Comparison/D6.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 27)], "2.0 Version Comparison/D7.csv", row.names = FALSE)
## for example, I declare the following values
pop_size <- 54125
prev <- 0.19
XpertCost <- 20
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
names(D6_Cost)
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
Cost <- Cost[, -c(2:4, 9:13)]
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("qXRv2", "qXRv3"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1)
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("qXRv2", "qXRv3"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
# CAD4TB ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("CAD4TBv6", "CAD4TBv7"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("qXRv2", "qXRv3"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
# CAD4TB ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("CAD4TBv6", "CAD4TBv7"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveCAD4TB <- base + theme_light()  + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveCAD4TB <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1) +theme(legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveCAD4TB <- base + theme_light()  + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveCAD4TB <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
# Model the effect
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/CAD_Xpert.csv")
# names(MDF)
# write.csv(MDF[, c(1, 13, 28)], "2.0 Version Comparison/Q2.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 29)], "2.0 Version Comparison/Q3.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 26)], "2.0 Version Comparison/D6.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 27)], "2.0 Version Comparison/D7.csv", row.names = FALSE)
## for example, I declare the following values
pop_size <- 54125
prev <- 0.19
XpertCost <- 20
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
names(D6_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
names(D6_Cost)
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
colnames(Cost)
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
View(Cost)
View(Cost)
Cost <- Cost[, -c(2:4, 9:15)]
names(Cost)
Cost <- mutate(Cost, XpertSaved. = 1-Cost$CADpos)
Cost$One <- 1
Cost$XpertSaved. <- (Cost$One-Cost$`CAD pos`)
Cost$XpertSaved. <- (Cost$One-Cost$CADpos)
Cost$Sens <- as.numeric(Cost$Sens)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Cost$Sens <- as.numeric.factor(Cost$Sens)
# Model the effect
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/CAD_Xpert.csv")
# names(MDF)
# write.csv(MDF[, c(1, 13, 28)], "2.0 Version Comparison/Q2.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 29)], "2.0 Version Comparison/Q3.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 26)], "2.0 Version Comparison/D6.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 27)], "2.0 Version Comparison/D7.csv", row.names = FALSE)
## for example, I declare the following values
pop_size <- 54125
prev <- 0.19
XpertCost <- 20
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
Cost <- Cost[, -c(2:4, 9:15)]
Cost$Sens <- as.numeric.factor(Cost$Sens)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Cost$Sens <-
as.numeric.factor(Cost$Sens)
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/CAD_Xpert.csv")
# names(MDF)
# write.csv(MDF[, c(1, 13, 28)], "2.0 Version Comparison/Q2.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 29)], "2.0 Version Comparison/Q3.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 26)], "2.0 Version Comparison/D6.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 27)], "2.0 Version Comparison/D7.csv", row.names = FALSE)
## for example, I declare the following values
pop_size <- 54125
prev <- 0.19
XpertCost <- 20
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
Cost <- Cost[, -c(2:4, 9:15)]
as.numeric(sub("%","",Cost$CADpos))/100
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
names(Cost)
Cost <- Cost[, -c(2:4, 9:15, 18)]
Cost$Sens <- as.numeric(sub("%","",x))/100
Cost$Sens <- as.numeric(sub("%","",Cost$Sens))/100
Cost$Spec <- as.numeric(sub("%","",Cost$Spec))/100
Cost$CADpos <- as.numeric(sub("%","",Cost$CADpos))/100
Cost$PPV <- as.numeric(sub("%","",Cost$PPV))/100
Cost$Totalcostforconfirmatorytest <- as.numeric(sub("$","",Cost$Totalcostforconfirmatorytest))
Cost$Costpercase <- as.numeric(sub("$","",Cost$Costpercase))
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
Cost <- Cost[, -c(2:4, 9:15, 18)]
Cost$Sens <- as.numeric(sub("%","",Cost$Sens))/100
Cost$Spec <- as.numeric(sub("%","",Cost$Spec))/100
Cost$CADpos <- as.numeric(sub("%","",Cost$CADpos))/100
Cost$PPV <- as.numeric(sub("%","",Cost$PPV))/100
Cost$Totalcostforconfirmatorytest <- as.numeric(gsub("$","",Cost$Totalcostforconfirmatorytest))
sub("$","",Cost$Costpercase
)
sub("\\$","",Cost$Costpercase)
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
Cost <- Cost[, -c(2:4, 9:15, 18)]
Cost$Sens <- as.numeric(sub("%","",Cost$Sens))/100
Cost$Spec <- as.numeric(sub("%","",Cost$Spec))/100
Cost$CADpos <- as.numeric(sub("%","",Cost$CADpos))/100
Cost$PPV <- as.numeric(sub("%","",Cost$PPV))/100
Cost$Totalcostforconfirmatorytest <- as.numeric(sub("\\$","",Cost$Totalcostforconfirmatorytest))
Cost$Costpercase <- as.numeric(sub("\\$","",Cost$Costpercase))
summary(Cost$Totalcostforconfirmatorytest)
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
Cost <- Cost[, -c(2:4, 9:15, 18)]
sub("\\$","",Cost$Totalcostforconfirmatorytest)
sub("\\$" |",","",Cost$Totalcostforconfirmatorytest)
sub("\\$,","",Cost$Totalcostforconfirmatorytest)
sub(",", "", sub("\\$","",Cost$Totalcostforconfirmatorytest))
Cost$Totalcostforconfirmatorytest <- as.numeric(sub(",", "", sub("\\$","",Cost$Totalcostforconfirmatorytest)))
Cost$Costpercase <- as.numeric(sub("\\$","",Cost$Costpercase))
summary(Cost$Totalcostforconfirmatorytest)
Cost$XpertSaved. <- (1-Cost$CADpos)
Cost$One <- 1
Cost$XpertSaved. <- (1-Cost$CADpos)
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
# rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
Cost <- Cost[, -c(2:4, 9:15, 18)]
Cost$Sens <- as.numeric(sub("%","",Cost$Sens))/100
Cost$Spec <- as.numeric(sub("%","",Cost$Spec))/100
Cost$CADpos <- as.numeric(sub("%","",Cost$CADpos))/100
Cost$PPV <- as.numeric(sub("%","",Cost$PPV))/100
Cost$Totalcostforconfirmatorytest <- as.numeric(sub(",", "", sub("\\$","",Cost$Totalcostforconfirmatorytest)))
Cost$Costpercase <- as.numeric(sub("\\$","",Cost$Costpercase))
Cost$XpertSaved. <- (1-Cost$CADpos)
### e. Xpert Saved vs Score --------------------
base <- ggplot(Cost, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
XpertSavingCurveqXR
base <- ggplot(Cost, aes(Score, XpertSaved.)) + geom_path(aes(color = AI))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
XpertSavingCurveqXR
### e. Xpert Saved vs cut-off --------------------
base <- ggplot(Cost, aes(cut-off, XpertSaved.)) + geom_path(aes(color = AI))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality cut-off", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality cut-off (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
XpertSavingCurveqXR
names(Cost)
names(Cost)[1] <- "Score"
names(Cost)[1] <- "Score"
### e. Xpert Saved vs Score --------------------
base <- ggplot(Cost, aes(Score, XpertSaved.)) + geom_path(aes(color = AI))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
XpertSavingCurveqXR
# qXR ----
Cost0 <- Cost
Cost <- Cost[Cost$AI %in% c("qXRv2", "qXRv3"), ]
Cost$AI <- as.character(Cost$AI)
### d. Sensitivity vs Score --------------------
base <- ggplot(Cost, aes(Score, Sens)) + geom_path(aes(color = AI)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### d. Sensitivity vs Score --------------------
base <- ggplot(Cost, aes(Score, Sens)) + geom_path(aes(color = AI)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(Cost, aes(Score, XpertSaved.)) + geom_path(aes(color = AI))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
# CAD4TB ----
Cost <- Cost0
Cost <- Cost[Cost$AI %in% c("CAD4TBv6", "CAD4TBv7"), ]
Cost$AI <- as.character(Cost$AI)
### d. Sensitivity vs Score --------------------
base <- ggplot(Cost, aes(Score, Sens)) + geom_path(aes(color = AI)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
sensCurveCAD4TB <- base + theme_light()  + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(Cost, aes(Score, XpertSaved.)) + geom_path(aes(color = AI))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveCAD4TB <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
View(Cost0)
Cost$Totalcostforconfirmatorytest/XpertCost
Cost$XpertTest <- Cost$Totalcostforconfirmatorytest/XpertCost
View(Cost)
Cost$Xpertsaved <- 1-Cost$XpertTest/54125
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
names(MDF)
summary(MDF$MTB.Burden)
table(MDF$MTB.Burden)
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
source("2.0 Version Comparison/Global.R")
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
Cost
View(Cost)
names(MDF$CAD4TB7)
names(MDF)
#
maxV<- 101
sep <- 1
## for example, I declare the following values
pop_size <- 54125
prev <- 0.19
XpertCost <- 20
### Set up a function
myfunction <- function(dataset, AI.system, car.cutoff){
a <- sum(AI.system >= car.cutoff & dataset$Xpert2Outcome_num =="1")
b <- sum(AI.system >= car.cutoff & dataset$Xpert2Outcome_num =="0")
c <- sum(AI.system < car.cutoff & dataset$Xpert2Outcome_num =="1")
d <- sum(AI.system < car.cutoff & dataset$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$elements$sensitivity),8))
specificity <- as.vector(round((rval$elements$specificity),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(dataset$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(dataset$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
return(accuracy)
}
################ MDF #####################################
AI.score <- seq(0, 1, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv7
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$CAD4TBv7, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
################ MDF #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv7
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$CAD4TBv7, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
summary(MDF$CAD4TBv6)
summary(MDF$CAD4TBv7)
summary(MDF$Xpert2Outcome_num)
a <- sum(MDF$CAD4TBv7 >= 20 & MDF$Xpert2Outcome_num =="1")
A
a
################ MDF #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv7
for (i in 1 : maxV){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$elements$sensitivity),8))
specificity <- as.vector(round((rval$elements$specificity),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(MDF$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
mylist[[i]] <- list(cutoff.accuracy)
}
AI.s
AI.score[2]
AI.score[101]
# CAD4TBv7
for (i in 0 : maxV){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$elements$sensitivity),8))
specificity <- as.vector(round((rval$elements$specificity),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(MDF$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
mylist[[i]] <- list(cutoff.accuracy)
}
AI.score[0]
AI.score[1]
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
# CAD4TBv7
for (i in 1 : 1){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
}
rval
# CAD4TBv7
for (i in 20 : 20){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
}
rval
rval$elements$sensitivity
rval$se
rval$tab
rval$detail$se
sensitivity <- as.vector(round((rval$detail$se),8))
specificity <- as.vector(round((rval$detail$sp),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(MDF$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
View(accuracy)
# CAD4TBv7
for (i in 1 : 100){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$detail$se),8))
specificity <- as.vector(round((rval$detail$sp),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(MDF$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
}
mylist[[i]] <- list(accuracy)
MDF.CAD4TBv7 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
MDF.CAD4TBv7$Subgroup  <- paste("MDF")
View(MDF.CAD4TBv7)
View(MDF.CAD4TBv7)
source("02_Chapter/SubGroup.R")
