# CAM.CAD4TB6$Comment[which(abs(CAM.CAD4TB6$X1-Radiologist$Sens[1]) == min(abs(CAM.CAD4TB6$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
# CAM.CAD4TB6$Comment[which(abs(CAM.CAD4TB6$X1-Radiologist$Sens[2]) == min(abs(CAM.CAD4TB6$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
# CAM.CAD4TB6$Comment[which(abs(CAM.CAD4TB6$X1-Radiologist$Sens[3]) == min(abs(CAM.CAD4TB6$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
CAM.DF <- rbind(CAM.qXR3, CAM.Lunit, CAM.Infervision, CAM.JF1, CAM.CAD4TB6)
rm(CAM.qXR3, CAM.Lunit, CAM.Infervision, CAM.JF1, CAM.CAD4TB6)
################ Bangladesh #####################################
source(file = "DataWrangling/GlobalOption.R")
source("radiologist.R")
BGD <- MDF[, ]
names(BGD)[26] <- "CAD4TB6"
names(BGD)[27] <- "qXR3"
names(BGD)[28] <- "Lunit"
names(BGD)[29]<- "JF1"
names(BGD)[32] <- "Infervision"
names(BGD)[13] <- "XPERT_pos"
### qXR, Lunit, Infervision, JF1 ------------
DL.score <- seq(0, 1, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# BGD_qXR3
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$qXR3, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.qXR3 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.qXR3$Country  <- paste("BGD")
BGD.qXR3$DeepLearningSystem <- paste("qXR")
BGD.qXR3$Comment <- ""
BGD.qXR3$Comment[which(abs(BGD.qXR3$X13-0.5) == min(abs(BGD.qXR3$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.qXR3$Comment[which(abs(BGD.qXR3$X13-2/3) == min(abs(BGD.qXR3$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.qXR3$Comment[which(abs(BGD.qXR3$X13-0.75) == min(abs(BGD.qXR3$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.qXR3$Comment[which(abs(BGD.qXR3$X1-Radiologist$Sens[1]) == min(abs(BGD.qXR3$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.qXR3$Comment[which(abs(BGD.qXR3$X1-Radiologist$Sens[2]) == min(abs(BGD.qXR3$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.qXR3$Comment[which(abs(BGD.qXR3$X1-Radiologist$Sens[3]) == min(abs(BGD.qXR3$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
# BGD_Lunit
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$Lunit, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.Lunit <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.Lunit$Country  <- paste("BGD")
BGD.Lunit$DeepLearningSystem <- paste("Lunit")
BGD.Lunit$Comment <- ""
BGD.Lunit$Comment[which(abs(BGD.Lunit$X13-0.5) == min(abs(BGD.Lunit$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.Lunit$Comment[which(abs(BGD.Lunit$X13-2/3) == min(abs(BGD.Lunit$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.Lunit$Comment[which(abs(BGD.Lunit$X13-0.75) == min(abs(BGD.Lunit$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.Lunit$Comment[which(abs(BGD.Lunit$X1-Radiologist$Sens[1]) == min(abs(BGD.Lunit$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.Lunit$Comment[which(abs(BGD.Lunit$X1-Radiologist$Sens[2]) == min(abs(BGD.Lunit$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.Lunit$Comment[which(abs(BGD.Lunit$X1-Radiologist$Sens[3]) == min(abs(BGD.Lunit$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
# BGD_Infervision
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$Infervision, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.Infervision <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.Infervision$Country  <- paste("BGD")
BGD.Infervision$DeepLearningSystem <- paste("Infervision")
BGD.Infervision$Comment <- ""
BGD.Infervision$Comment[which(abs(BGD.Infervision$X13-0.5) == min(abs(BGD.Infervision$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.Infervision$Comment[which(abs(BGD.Infervision$X13-2/3) == min(abs(BGD.Infervision$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.Infervision$Comment[which(abs(BGD.Infervision$X13-0.75) == min(abs(BGD.Infervision$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.Infervision$Comment[which(abs(BGD.Infervision$X1-Radiologist$Sens[1]) == min(abs(BGD.Infervision$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.Infervision$Comment[which(abs(BGD.Infervision$X1-Radiologist$Sens[2]) == min(abs(BGD.Infervision$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.Infervision$Comment[which(abs(BGD.Infervision$X1-Radiologist$Sens[3]) == min(abs(BGD.Infervision$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
# BGD_JF1
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$JF1, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.JF1 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.JF1$Country  <- paste("BGD")
BGD.JF1$DeepLearningSystem <- paste("JF1")
BGD.JF1$Comment <- ""
BGD.JF1$Comment[which(abs(BGD.JF1$X13-0.5) == min(abs(BGD.JF1$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.JF1$Comment[which(abs(BGD.JF1$X13-2/3) == min(abs(BGD.JF1$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.JF1$Comment[which(abs(BGD.JF1$X13-0.75) == min(abs(BGD.JF1$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.JF1$Comment[which(abs(BGD.JF1$X1-Radiologist$Sens[1]) == min(abs(BGD.JF1$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.JF1$Comment[which(abs(BGD.JF1$X1-Radiologist$Sens[2]) == min(abs(BGD.JF1$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.JF1$Comment[which(abs(BGD.JF1$X1-Radiologist$Sens[3]) == min(abs(BGD.JF1$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
### CAD4TB ------------
DL.score <- seq(0, 100, by = sepdeflt)
# BGD_CAD4TB6
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$CAD4TB6, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.CAD4TB6 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.CAD4TB6$Country  <- paste("BGD")
BGD.CAD4TB6$DeepLearningSystem <- paste("CAD4TB")
BGD.CAD4TB6$Comment <- ""
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X13-0.5) == min(abs(BGD.CAD4TB6$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X13-2/3) == min(abs(BGD.CAD4TB6$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X13-0.75) == min(abs(BGD.CAD4TB6$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X1-Radiologist$Sens[1]) == min(abs(BGD.CAD4TB6$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X1-Radiologist$Sens[2]) == min(abs(BGD.CAD4TB6$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X1-Radiologist$Sens[3]) == min(abs(BGD.CAD4TB6$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
BGD.DF <- rbind(BGD.qXR3, BGD.Lunit, BGD.Infervision, BGD.JF1, BGD.CAD4TB6)
rm(BGD.qXR3, BGD.Lunit, BGD.Infervision, BGD.JF1, BGD.CAD4TB6)
######### Merge DFs ######
# CAD_Xpert <- rbind(CAM.DF, NPL.DF, BGD.DF)
CAD_Xpert <- BGD.DF
colnames(CAD_Xpert)[1] <- "Sens"
colnames(CAD_Xpert)[2] <- "Sens_L"
colnames(CAD_Xpert)[3] <- "Sens_H"
colnames(CAD_Xpert)[4] <- "Spec"
colnames(CAD_Xpert)[5] <- "Spec_L"
colnames(CAD_Xpert)[6] <- "Spec_H"
colnames(CAD_Xpert)[7] <- "ppv"
colnames(CAD_Xpert)[8] <- "PPV_L"
colnames(CAD_Xpert)[9] <- "PPV_H"
colnames(CAD_Xpert)[10] <- "npv"
colnames(CAD_Xpert)[11] <- "NPV_L"
colnames(CAD_Xpert)[12] <- "NPV_H"
colnames(CAD_Xpert)[13] <- "%XpertSaved"
colnames(CAD_Xpert)[14] <- "Score"
colnames(CAD_Xpert)[15] <- "accuracy"
colnames(CAD_Xpert)[16] <- "Site"
CAD_Xpert$X <- 1-CAD_Xpert$Spec
CAD_Xpert$Sen_95CI <- paste(percent(CAD_Xpert[, 2], suffix = ""), "-", percent(CAD_Xpert[, 3]), sep = "")
CAD_Xpert$Spe_95CI <- paste(percent(CAD_Xpert[, 5], suffix = ""), "-", percent(CAD_Xpert[, 6]), sep = "")
CAD_Xpert$PPV_95CI <- paste(percent(CAD_Xpert[, 8], suffix = ""), "-", percent(CAD_Xpert[, 9]), sep = "")
CAD_Xpert$NPV_95CI <- paste(percent(CAD_Xpert[, 11], suffix = ""), "-", percent(CAD_Xpert[, 12]), sep = "")
CAD_Xpert$NNT <- 1/CAD_Xpert$ppv
CAD_Xpert$NNT_H <- 1/CAD_Xpert$PPV_L
CAD_Xpert$NNT_L <- 1/CAD_Xpert$PPV_H
CAD_Xpert$Sensitivity <- paste(percent(CAD_Xpert$Sens, accuracy = 0.1), " (", CAD_Xpert$Sen_95CI, ")", sep = "")
CAD_Xpert$Specificity <- paste(percent(CAD_Xpert$Spec, accuracy = 0.1), " (", CAD_Xpert$Spe_95CI, ")", sep = "")
CAD_Xpert$PPV <- paste(percent(CAD_Xpert$ppv, accuracy = 0.1), " (", CAD_Xpert$PPV_95CI, ")", sep = "")
CAD_Xpert$NPV <- paste(percent(CAD_Xpert$npv, accuracy = 0.1), " (", CAD_Xpert$NPV_95CI, ")", sep = "")
CAD_Xpert$nnt <- paste(round(CAD_Xpert$NNT, 1), " (", round(CAD_Xpert$NNT_L, 1), "-", round(CAD_Xpert$NNT_H, 1), ")", sep = "")
CAD_Xpert$`%XpertSaved` <- round(CAD_Xpert$`%XpertSaved`, 8)
CAD_Xpert$accuracy <- round(CAD_Xpert$accuracy, 3)
CAD_Xpert$DeepLearningSystem <- as.character(CAD_Xpert$DeepLearningSystem)
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "Infervision"] <- "InferReadDR"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "Lunit"] <- "Lunit INSIGHT CXR"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "CAD4TB"] <- "CAD4TB"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "qXR"] <- "qXR"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "JF1"] <- "JF CXR-1"
CAD_Xpert$Score[CAD_Xpert$DeepLearningSystem %in% "CAD4TB"] <- CAD_Xpert$Score[CAD_Xpert$DeepLearningSystem %in% "CAD4TB"]/100
tapply(CAD_Xpert$Score, CAD_Xpert$DeepLearningSystem, summary)
################ updating qXRv3 ----------------------
# CAD_Xpert <- read.csv("Results/CAD_Xpert_Precise.csv")
#
# CAD_Xpert_noBGDqXR <- CAD_Xpert[!(CAD_Xpert$Site %in% "BGD" & CAD_Xpert$DeepLearningSystem %in% "qXR"), ]
#
# BGD.qXR3 <- BGD.qXR3[, c(1:23, 27:30, 24:26, 31 )]
# colnames(CAD_Xpert_noBGDqXR)[13] <- "%XpertSaved"
#
# CAD_Xpert <- rbind(CAD_Xpert_noBGDqXR, BGD.qXR3)
################################
SuppTable <- CAD_Xpert[, c(16, 17, 14, 26:29, 30, 13, 15)]
View(SuppTable)
# CAD_Xpert_plot <- CAD_Xpert[, c(16, 17, 14, 13, 15, 1:12, 19, 28:30)]
# write.csv(CAD_Xpert, "Results/CAD_Xpert_qXR3.csv", row.names = F)
# write.csv(CAD_Xpert_plot, "Results/CAD_Xpert Cutoffs TABLE.csv", row.names = F)
# write.csv(SuppTable, "Results/Supp Tab.csv", row.names = F)
#
# rm(CAM.DF, NPL.DF, BGD.DF, i, DL.score, mylist, cutoff.accuracy, NPL, CAM, BGD.DF, BGD)
#
#
# write.csv(CAD_Xpert, "Results/CAD_Xpert_qXR3.csv", row.names = F)
# write.csv(CAD_Xpert_plot, "Results/CAD_Xpert Cutoffs TABLE.csv", row.names = F)
write.csv(SuppTable, "Results/Supp Tab.csv", row.names = F)
View(SuppTable)
names(SuppTable)
names(CAD_Xpert)
################################
SuppTable <- CAD_Xpert[, c(16, 17, 27:31, 13, 15)]
# write.csv(CAD_Xpert, "Results/CAD_Xpert_qXR3.csv", row.names = F)
# write.csv(CAD_Xpert_plot, "Results/CAD_Xpert Cutoffs TABLE.csv", row.names = F)
write.csv(SuppTable, "Results/Supp Tab.csv", row.names = F)
################################
SuppTable <- CAD_Xpert[, c(16, 17, 14, 27:31, 13, 15)]
# write.csv(CAD_Xpert, "Results/CAD_Xpert_qXR3.csv", row.names = F)
# write.csv(CAD_Xpert_plot, "Results/CAD_Xpert Cutoffs TABLE.csv", row.names = F)
write.csv(SuppTable, "Results/Supp Tab.csv", row.names = F)
source('C:/Users/zhizh/OneDrive - Stop TB Partnership/UNOPS/10 Paper Writing/CAR software/02 Bangladesh/MachineBGD/Extreme AI score.R', echo=TRUE)
library(readxl)
Teleradiology <- read_excel("C:/Users/zhizh/OneDrive - Stop TB Partnership/UNOPS/10 Paper Writing/CAR software/02 Bangladesh/MachineBGD/DataWrangling/TeleradiologyReportsUpdated.xlsx")
# names(Teleradiology)
colnames(Teleradiology)[1] <- "TID_OMRS"
Teleradiology$`Abnormality/TB`[Teleradiology$`Abnormality/TB` == "Abnormality consistent with TB" ] <- "TB_Abnormality"
Teleradiology$`Abnormality/TB`[Teleradiology$`Abnormality/TB` == "Abnormality NOT consistent with TB" ] <- "All_Abnormality"
Tele <- merge(Teleradiology, MDF[, c(1, 3, 13, 46:52)], by="TID_OMRS")
write.csv(Tele, "Tele.csv")
source("DataWrangling/GlobalOption.R")
source("radiologist.R")
Radiologist <- Radiologist[Radiologist$Referral %in% "MDF", ]
New <- MDF[MDF$TB.Medication.History %in% "No",]
Old <- MDF[MDF$TB.Medication.History %in% "Yes",]
Female <- MDF[MDF$Gender %in% "F", ]
Male <- MDF[MDF$Gender %in% "M", ]
Young <- MDF[MDF$AgeGroup %in% "[15,25)",]
Middle <- MDF[MDF$AgeGroup %in% "[25,60)",]
Senior <- MDF[MDF$AgeGroup %in% "[60,108]",]
Referral <- subset(MDF, MDF$UseCase %in% "PrivatePublicReferral")
DOTS <- subset(MDF, MDF$UseCase %in% "PublicDOTSRetesting")
WalkIn <- subset(MDF, MDF$UseCase %in% "WalkIn")
summary(MDF$UseCase)
WalkIn <- subset(MDF, MDF$UseCase %in% "WalkIn")
```{r Global_options, include=FALSE}
source("DataWrangling/GlobalOption.R")
source("radiologist.R")
Radiologist <- Radiologist[Radiologist$Referral %in% "MDF", ]
New <- MDF[MDF$TB.Medication.History %in% "No",]
Old <- MDF[MDF$TB.Medication.History %in% "Yes",]
Female <- MDF[MDF$Gender %in% "F", ]
Male <- MDF[MDF$Gender %in% "M", ]
Young <- MDF[MDF$AgeGroup %in% "[15,25)",]
Middle <- MDF[MDF$AgeGroup %in% "[25,60)",]
Senior <- MDF[MDF$AgeGroup %in% "[60,108]",]
Referral <- subset(MDF, MDF$UseCase %in% "PrivatePublicReferral")
DOTS <- subset(MDF, MDF$UseCase %in% "PublicDOTSRetesting")
WalkIn <- subset(MDF, MDF$UseCase %in% "WalkIn")
# Missing <- subset(MDF, is.na(MDF$UseCase)==T)
New_long <- MDF_long[MDF_long$TB.Medication.History %in% "No",]
Old_long <- MDF_long[MDF_long$TB.Medication.History %in% "Yes",]
Young_long <- MDF_long[MDF_long$AgeGroup %in% "[15,25)",]
Middle_long <- MDF_long[MDF_long$AgeGroup %in% "[25,60)",]
Senior_long <- MDF_long[MDF_long$AgeGroup %in% "[60,108]",]
Referral_long  <- subset(MDF_long, MDF_long$UseCase %in% "PrivatePublicReferral")
DOTS_long  <- subset(MDF_long, MDF_long$UseCase %in% "PublicDOTSRetesting")
WalkIn_long  <- subset(MDF_long, MDF_long$UseCase %in% "WalkIn")
## All
library(precrec)
library(ggplot2)
ROCPRC <- function(dataset){
attr <- attributes(evalmod(scores = dataset$CAD4TB6, labels = dataset$Xpert2Outcome_num))
aucT1 <- c("CAD4TB ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$qXRv3, labels = dataset$Xpert2Outcome_num))
aucT2 <- c("qXR ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$LunitScore, labels = dataset$Xpert2Outcome_num))
aucT3 <- c("Lunit INSIGHT CXR", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$JF1, labels = dataset$Xpert2Outcome_num))
aucT4 <- c("JF CXR-1", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$IF2, labels = dataset$Xpert2Outcome_num))
aucT5 <- c("InferReadDR ", round(attr$auc[4],3))
# return(mmcurves)
# return(autoplot(mmcurves))
aucT <- c(aucT1, aucT2, aucT3, aucT4, aucT5)
return(aucT)
}
l <- ROCPRC(MDF)
all <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
all$subgroup <- "all"
## New only
l <- ROCPRC(New)
New <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
New$subgroup <- "New cases"
## Old only
l <- ROCPRC(Old)
Old <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Old$subgroup <- "Previously treated cases"
## Young
l <- ROCPRC(Young)
Young <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Young$subgroup <- "Young age"
## Middle
l <- ROCPRC(Middle)
Middle <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Middle$subgroup <- "Middle age"
## Senior
l <- ROCPRC(Senior)
Senior <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Senior$subgroup <- "Old age"
## Referral only
l <- ROCPRC(Referral)
Referral <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Referral$subgroup <- "Referred"
## DOTS only
l <- ROCPRC(DOTS)
DOTS <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
DOTS$subgroup <- "DOTS retested"
## Walk-in only
l <- ROCPRC(WalkIn)
WalkIn <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
WalkIn$subgroup <- "WalkIn"
## Female
l <- ROCPRC(Female)
Female <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Female$subgroup <- "Female"
## Male
l <- ROCPRC(Male)
Male <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Male$subgroup <- "Male"
#### stratification by age AND prior TB history
aucTable <- rbind(all, New, Old, Young, Middle, Senior, Referral, DOTS, WalkIn, Female, Male)
colnames(aucTable) <- c("DL System", "AUC", "PCAUC", "Subgroup")
# write.csv(aucTable, "Results/aucTable.csv")
# rm(list=(ls()))
aucTable
names(SubgroupTable)
write.csv(aucTable, "Results/aucTable.csv")
# rm(list=(ls()))
rm(list=(ls()))
aucTable <- read.csv("Results/aucTable.csv")
aucTable <- aucTable[, -1]
aucTable$Subgroup <- factor(aucTable$Subgroup, levels = c("Young age", "Middle age", "Old age", "Referred", "DOTS retested", "WalkIn", "New cases", "Previously treated cases", "Female", "Male"))
### AUC
age<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=DL.System, y=AUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
referral<-ggplot(aucTable[aucTable$Subgroup %in% c("Referred", "DOTS retested", "WalkIn"), ], aes(x=DL.System, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
history<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=DL.System, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
gender <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=DL.System, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
### PRC
agePC<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=DL.System, y=PCAUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
referralPC<-ggplot(aucTable[aucTable$Subgroup %in% c("Referred", "DOTS retested", "WalkIn"), ], aes(x=DL.System, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
historyPC<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=DL.System, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
genderPC <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=DL.System, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
tiff("Results/PRC ROC AUC plot.tif", width = 18, height = 8, units = "in", res = 100)
require(gridExtra)
grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=4)
# grid.arrange(age, referral, history, ncol=3)
dev.off()
# rm(age, referral, history, agePC, referralPC, historyPC, gender, genderPC)
tiff("Results/PRC AUC plot.tif", width = 9, height = 8, units = "in", res = 100)
grid.arrange(agePC, referralPC, historyPC, genderPC, ncol=2)
dev.off()
names(aucTable)
## All
library(precrec)
library(ggplot2)
ROCPRC <- function(dataset){
attr <- attributes(evalmod(scores = dataset$CAD4TB6, labels = dataset$Xpert2Outcome_num))
aucT1 <- c("CAD4TB ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$qXRv3, labels = dataset$Xpert2Outcome_num))
aucT2 <- c("qXR ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$LunitScore, labels = dataset$Xpert2Outcome_num))
aucT3 <- c("Lunit INSIGHT CXR", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$JF1, labels = dataset$Xpert2Outcome_num))
aucT4 <- c("JF CXR-1", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$IF2, labels = dataset$Xpert2Outcome_num))
aucT5 <- c("InferReadDR ", round(attr$auc[4],3))
# return(mmcurves)
# return(autoplot(mmcurves))
aucT <- c(aucT1, aucT2, aucT3, aucT4, aucT5)
return(aucT)
}
l <- ROCPRC(MDF)
source("DataWrangling/GlobalOption.R")
source("radiologist.R")
Radiologist <- Radiologist[Radiologist$Referral %in% "MDF", ]
New <- MDF[MDF$TB.Medication.History %in% "No",]
Old <- MDF[MDF$TB.Medication.History %in% "Yes",]
Female <- MDF[MDF$Gender %in% "F", ]
Male <- MDF[MDF$Gender %in% "M", ]
Young <- MDF[MDF$AgeGroup %in% "[15,25)",]
Middle <- MDF[MDF$AgeGroup %in% "[25,60)",]
Senior <- MDF[MDF$AgeGroup %in% "[60,108]",]
Referral <- subset(MDF, MDF$UseCase %in% "PrivatePublicReferral")
DOTS <- subset(MDF, MDF$UseCase %in% "PublicDOTSRetesting")
WalkIn <- subset(MDF, MDF$UseCase %in% "WalkIn")
# Missing <- subset(MDF, is.na(MDF$UseCase)==T)
New_long <- MDF_long[MDF_long$TB.Medication.History %in% "No",]
Old_long <- MDF_long[MDF_long$TB.Medication.History %in% "Yes",]
Young_long <- MDF_long[MDF_long$AgeGroup %in% "[15,25)",]
Middle_long <- MDF_long[MDF_long$AgeGroup %in% "[25,60)",]
Senior_long <- MDF_long[MDF_long$AgeGroup %in% "[60,108]",]
Referral_long  <- subset(MDF_long, MDF_long$UseCase %in% "PrivatePublicReferral")
DOTS_long  <- subset(MDF_long, MDF_long$UseCase %in% "PublicDOTSRetesting")
WalkIn_long  <- subset(MDF_long, MDF_long$UseCase %in% "WalkIn")
## All
library(precrec)
library(ggplot2)
ROCPRC <- function(dataset){
attr <- attributes(evalmod(scores = dataset$CAD4TB6, labels = dataset$Xpert2Outcome_num))
aucT1 <- c("CAD4TB ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$qXRv3, labels = dataset$Xpert2Outcome_num))
aucT2 <- c("qXR ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$LunitScore, labels = dataset$Xpert2Outcome_num))
aucT3 <- c("Lunit INSIGHT CXR", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$JF1, labels = dataset$Xpert2Outcome_num))
aucT4 <- c("JF CXR-1", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$IF2, labels = dataset$Xpert2Outcome_num))
aucT5 <- c("InferReadDR ", round(attr$auc[4],3))
# return(mmcurves)
# return(autoplot(mmcurves))
aucT <- c(aucT1, aucT2, aucT3, aucT4, aucT5)
return(aucT)
}
l <- ROCPRC(MDF)
all <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
all$subgroup <- "all"
## New only
l <- ROCPRC(New)
New <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
New$subgroup <- "New cases"
## Old only
l <- ROCPRC(Old)
Old <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Old$subgroup <- "Previously treated cases"
## Young
l <- ROCPRC(Young)
Young <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Young$subgroup <- "Young age"
## Middle
l <- ROCPRC(Middle)
Middle <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Middle$subgroup <- "Middle age"
## Senior
l <- ROCPRC(Senior)
Senior <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Senior$subgroup <- "Old age"
## Referral only
l <- ROCPRC(Referral)
Referral <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Referral$subgroup <- "Referred"
## DOTS only
l <- ROCPRC(DOTS)
DOTS <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
DOTS$subgroup <- "DOTS retested"
## Walk-in only
l <- ROCPRC(WalkIn)
WalkIn <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
WalkIn$subgroup <- "WalkIn"
## Female
l <- ROCPRC(Female)
Female <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Female$subgroup <- "Female"
## Male
l <- ROCPRC(Male)
Male <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Male$subgroup <- "Male"
#### stratification by age AND prior TB history
aucTable <- rbind(all, New, Old, Young, Middle, Senior, Referral, DOTS, WalkIn, Female, Male)
colnames(aucTable) <- c("AI.Algorithm", "AUC", "PCAUC", "Subgroup")
write.csv(aucTable, "Results/aucTable.csv")
rm(list=(ls()))
aucTable <- read.csv("Results/aucTable.csv")
aucTable <- aucTable[, -1]
names(aucTable)
aucTable <- read.csv("Results/aucTable.csv")
aucTable <- aucTable[, -1]
aucTable$Subgroup <- factor(aucTable$Subgroup, levels = c("Young age", "Middle age", "Old age", "Referred", "DOTS retested", "WalkIn", "New cases", "Previously treated cases", "Female", "Male"))
### AUC
age<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
referral<-ggplot(aucTable[aucTable$Subgroup %in% c("Referred", "DOTS retested", "WalkIn"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
history<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
gender <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
### PRC
agePC<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
referralPC<-ggplot(aucTable[aucTable$Subgroup %in% c("Referred", "DOTS retested", "WalkIn"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
historyPC<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
genderPC <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
tiff("Results/PRC ROC AUC plot.tif", width = 18, height = 8, units = "in", res = 100)
require(gridExtra)
grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=4)
# grid.arrange(age, referral, history, ncol=3)
dev.off()
# rm(age, referral, history, agePC, referralPC, historyPC, gender, genderPC)
tiff("Results/PRC AUC plot.tif", width = 9, height = 8, units = "in", res = 100)
grid.arrange(agePC, referralPC, historyPC, genderPC, ncol=2)
dev.off()
library(readr)
SubgroupTable <- read_csv("Chapter/Subgroup Table/SubgroupTable.csv")
View(SubgroupTable)
SubgroupTable <- read_csv("Chapter/Subgroup Table/SubgroupTable.csv", row.names==F)
View(SubgroupTable)
names(SubgroupTable)
SubgroupTable[, c(3, 4, 25, 19:22)]
SubgroupTable[SubgroupTable$DeepLearningSystem %in% "54", c(3, 4, 25, 19:22)]
SubgroupTable[SubgroupTable$DeepLearningSystem == 54, c(3, 4, 25, 19:22)]
SubgroupTable[SubgroupTable$DeepLearningSystem %in% "CAD46B" & SubgroupTable$Score == 54, c(3, 4, 25, 19:22)]
SubgroupTable[SubgroupTable$DeepLearningSystem %in% "CAD46TB" & SubgroupTable$Score == 54, c(3, 4, 25, 19:22)]
SubgroupTable[SubgroupTable$DeepLearningSystem %in% "CAD4TB" & SubgroupTable$Score == 54, c(3, 4, 25, 19:22)]
View(SubgroupTable[SubgroupTable$DeepLearningSystem %in% "CAD4TB" & SubgroupTable$Score == 54, c(3, 4, 25, 19:22)])
View(SubgroupTable[SubgroupTable$DeepLearningSystem %in% "CAD4TB" & SubgroupTable$Score == 65, c(3, 4, 25, 19:22)])
View(SubgroupTable)
table(SubgroupTable$DeepLearningSystem)
table(SubgroupTable$subgroup)
View(SubgroupTable[SubgroupTable$DeepLearningSystem %in% "Lunit" & SubgroupTable$Score == 0.5, c(3, 4, 25, 19:22)])
CAD6_delft <- read.table(file = "DataWrangling/CAD_delft_2018.csv", sep = ",", header = T, fill = T)
colnames(CAD6_delft)[7] <- "TID_Delft"
CAD6_delft <- CAD6_delft[, -2]
CAD6_delft <- CAD6_delft[, c(1, 2, 6, 9, 10)]
names(CAD6_delft)
Sys.setenv(LANG = "en")
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC) # contain function roc
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library(readxl)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Master_df <- read.csv(file = "DataWrangling/Master_60K_OpenMRS_08_11_2018.csv", header=T)
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- quarter(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
Master_df <- Master_df %>%
filter(Result.Date < as.Date("2017-01-01"))
SymptomData <- read_excel("DataWrangling/ScreeningData.xlsx")
Master_df <- merge(Master_df, SymptomData, by.x = "PID_OMRS", by.y = "OpenMRS Identification Number", all.x = TRUE)
# # Delft 6.0.0
# CAD6_delft <- read.table(file = "DataWrangling/CAD_delft_2018.csv", sep = ",", header = T, fill = T)
# colnames(CAD6_delft)[7] <- "TID_Delft"
# CAD6_delft <- CAD6_delft[, -2]
# CAD6_delft <- CAD6_delft[, c(1, 2, 6, 9, 10)]
Master_df <- read.csv(file = "DataWrangling/Master_60K_OpenMRS_08_11_2018.csv", header=T)
getwd
getwd()
