ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none")
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
### Save --------------------
tiff("Results/6Curves_CAD6_300.tif", width = 10, height = 14.3, units = "in", res = 300)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
9/7*10
# CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
table(CAD_Xpert_plot$DeepLearningSystem)
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
# CAD_Xpert_plot$DeepLearningSystem[grep("CAD4TB", CAD_Xpert_plot$DeepLearningSystem)] <- "P1"
# CAD_Xpert_plot$DeepLearningSystem[grep("qXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P3"
# CAD_Xpert_plot$DeepLearningSystem[grep("Lunit INSIGHT CXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P2"
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(XpertSaved., Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = XpertSaved., ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none")
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
### Save --------------------
tiff("Results/6Curves_CAD6_300.tif", width = 10, height = 14.3, units = "in", res = 300)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
9/7*10
tiff("Results/6Curves_CAD6_300.tif", width = 9, height = 12.86, units = "in", res = 300)
# CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
table(CAD_Xpert_plot$DeepLearningSystem)
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
# CAD_Xpert_plot$DeepLearningSystem[grep("CAD4TB", CAD_Xpert_plot$DeepLearningSystem)] <- "P1"
# CAD_Xpert_plot$DeepLearningSystem[grep("qXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P3"
# CAD_Xpert_plot$DeepLearningSystem[grep("Lunit INSIGHT CXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P2"
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(XpertSaved., Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = XpertSaved., ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none")
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
### Save --------------------
tiff("Results/6Curves_CAD6_300.tif", width = 9, height = 12.86, units = "in", res = 300)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
# CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
table(CAD_Xpert_plot$DeepLearningSystem)
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
# CAD_Xpert_plot$DeepLearningSystem[grep("CAD4TB", CAD_Xpert_plot$DeepLearningSystem)] <- "P1"
# CAD_Xpert_plot$DeepLearningSystem[grep("qXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P3"
# CAD_Xpert_plot$DeepLearningSystem[grep("Lunit INSIGHT CXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P2"
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(XpertSaved., Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = XpertSaved., ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none")
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
### Save --------------------
tiff("Results/6Curves_CAD6_300.tif", width = 9, height = 12.86, units = "in", res = 200)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
# CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
table(CAD_Xpert_plot$DeepLearningSystem)
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
# CAD_Xpert_plot$DeepLearningSystem[grep("CAD4TB", CAD_Xpert_plot$DeepLearningSystem)] <- "P1"
# CAD_Xpert_plot$DeepLearningSystem[grep("qXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P3"
# CAD_Xpert_plot$DeepLearningSystem[grep("Lunit INSIGHT CXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P2"
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(XpertSaved., Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = XpertSaved., ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none")
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
### Save --------------------
tiff("Results/6Curves_CAD6_400.tif", width = 9, height = 12.86, units = "in", res = 400)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
# CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
table(CAD_Xpert_plot$DeepLearningSystem)
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
# CAD_Xpert_plot$DeepLearningSystem[grep("CAD4TB", CAD_Xpert_plot$DeepLearningSystem)] <- "P1"
# CAD_Xpert_plot$DeepLearningSystem[grep("qXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P3"
# CAD_Xpert_plot$DeepLearningSystem[grep("Lunit INSIGHT CXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P2"
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(XpertSaved., Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = XpertSaved., ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none")
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
### Save --------------------
tiff("Results/6Curves_CAD6_400.tif", width = 9, height = 12.86, units = "in", res = 350)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
# CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
table(CAD_Xpert_plot$DeepLearningSystem)
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
# CAD_Xpert_plot$DeepLearningSystem[grep("CAD4TB", CAD_Xpert_plot$DeepLearningSystem)] <- "P1"
# CAD_Xpert_plot$DeepLearningSystem[grep("qXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P3"
# CAD_Xpert_plot$DeepLearningSystem[grep("Lunit INSIGHT CXR", CAD_Xpert_plot$DeepLearningSystem)] <- "P2"
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(XpertSaved., Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = XpertSaved., ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none")
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
### Save --------------------
tiff("Results/6Curves_CAD6_300.tif", width = 7, height = 10, units = "in", res = 350)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
####========================================================
# CAD4TB version 6 and verson 6.3 are both included in this script. no need to rerun the cleaning.r, just load different dataset
# line 30-31
####========================================================
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- read.csv("DataWrangling/MDF.6.3.csv")
# RM <- MDF[(is.na(MDF$UseCase)==T) & MDF$GXP.Result %in% "MTB Not Detected" & MDF$Radiology.Result %in% "X-Ray Normal", ]
# RM <- RM[1:48, ]
# MDF <- MDF[!MDF$PID_OMRS %in% RM$PID_OMRS, ]
summary(MDF$UseCase)
#
# MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
summary(MDF$Radiology.Result) # removing 16 images that were marked  unclear
MDF <- MDF[MDF$Radiology.Result != "", ]
MDF <- MDF[MDF$Radiology.Result != "Image Unclear", ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv3_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
# ML <- MDF[, c('PID_OMRS', 'Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv3', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_training <- ML[sample(nrow(ML), 18853), ]
# ML_testing <- subset(ML, !(ML$PID_OMRS %in% ML_training$PID_OMRS))
# write.csv(ML, "DataWrangling/ML.csv", row.names = F)
# write.csv(ML_training, "DataWrangling/ML_training.csv", row.names = F)
# write.csv(ML_testing, "DataWrangling/ML_testing.csv", row.names = F)
ROCaucTable <- read.csv("Results/ROCaucTable.csv")
ROCaucTable$subgroup <- factor(ROCaucTable$subgroup, levels = c("Young age", "Middle age", "Old age", "Referred", "DOTS retested", "WalkIn", "New cases", "Previously treated cases"))
### AUC
age <-ggplot(ROCaucTable[ROCaucTable$subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=AUC, fill=subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge()) + geom_errorbar(aes(ymin=AUCL, ymax=AUCH), width=.2, position=position_dodge(0.7)) + theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
age
ROCaucTable <- read.csv("Results/ROCaucTable.csv")
ROCaucTable$subgroup <- factor(ROCaucTable$subgroup, levels = c("Young age", "Middle age", "Old age", "Referred", "DOTS retested", "WalkIn", "New cases", "Previously treated cases"))
### AUC
age <-ggplot(ROCaucTable[ROCaucTable$subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=AUC, fill=subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge()) + geom_errorbar(aes(ymin=AUCL, ymax=AUCH), width=.2, position=position_dodge(0.7)) + theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
age
aucTable <- read.csv("Results/aucTable.csv")
aucTable <- aucTable[, -1]
aucTable$Subgroup <- factor(aucTable$Subgroup, levels = c("All","Young age", "Middle age", "Old age", "PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts", "New cases", "Previously treated cases", "Female", "Male"))
### AUC
age<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
referral<-ggplot(aucTable[aucTable$Subgroup %in% c("PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
history<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90) + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
gender <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90) +theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
### PRC
agePC<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
referralPC<-ggplot(aucTable[aucTable$Subgroup %in% c("PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
historyPC<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal() + theme(legend.position = "top") +  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
genderPC <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
#
# tiff("Results/PRC ROC AUC plot 3.tif", width = 20, height = 8, units = "in", res = 110)
# require(gridExtra)
# grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=4)
# dev.off()
tiff("Results/Figure3_100.tif", width = 10, height = 12, units = "in", res = 100)
require(gridExtra)
grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=2)
dev.off()
# tiff("Results/PRC AUC plot.tif", width = 9, height = 8, units = "in", res = 100)
# grid.arrange(agePC, referralPC, historyPC, genderPC, ncol=2)
# dev.off()
aucTable <- read.csv("Results/aucTable.csv")
aucTable <- aucTable[, -1]
aucTable$Subgroup <- factor(aucTable$Subgroup, levels = c("All","Young age", "Middle age", "Old age", "PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts", "New cases", "Previously treated cases", "Female", "Male"))
### AUC
age<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
referral<-ggplot(aucTable[aucTable$Subgroup %in% c("PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
history<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90) + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
gender <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90) +theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
### PRC
agePC<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
referralPC<-ggplot(aucTable[aucTable$Subgroup %in% c("PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
historyPC<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal() + theme(legend.position = "top") +  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
genderPC <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
#
# tiff("Results/PRC ROC AUC plot 3.tif", width = 20, height = 8, units = "in", res = 110)
# require(gridExtra)
# grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=4)
# dev.off()
tiff("Results/Figure3_200.tif", width = 10, height = 12, units = "in", res = 200)
require(gridExtra)
grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=2)
dev.off()
# tiff("Results/PRC AUC plot.tif", width = 9, height = 8, units = "in", res = 100)
# grid.arrange(agePC, referralPC, historyPC, genderPC, ncol=2)
# dev.off()
aucTable <- read.csv("Results/aucTable.csv")
aucTable <- aucTable[, -1]
aucTable$Subgroup <- factor(aucTable$Subgroup, levels = c("All","Young age", "Middle age", "Old age", "PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts", "New cases", "Previously treated cases", "Female", "Male"))
### AUC
age<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
referral<-ggplot(aucTable[aucTable$Subgroup %in% c("PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
history<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90) + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
gender <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90) +theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
### PRC
agePC<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
referralPC<-ggplot(aucTable[aucTable$Subgroup %in% c("PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
historyPC<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal() + theme(legend.position = "top") +  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
genderPC <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
#
# tiff("Results/PRC ROC AUC plot 3.tif", width = 20, height = 8, units = "in", res = 110)
# require(gridExtra)
# grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=4)
# dev.off()
tiff("Results/Figure3_250.tif", width = 10, height = 12, units = "in", res = 250)
require(gridExtra)
grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=2)
dev.off()
# tiff("Results/PRC AUC plot.tif", width = 9, height = 8, units = "in", res = 100)
# grid.arrange(agePC, referralPC, historyPC, genderPC, ncol=2)
# dev.off()
12/10&12
12/10*12
aucTable <- read.csv("Results/aucTable.csv")
aucTable <- aucTable[, -1]
aucTable$Subgroup <- factor(aucTable$Subgroup, levels = c("All","Young age", "Middle age", "Old age", "PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts", "New cases", "Previously treated cases", "Female", "Male"))
### AUC
age<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
referral<-ggplot(aucTable[aucTable$Subgroup %in% c("PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
history<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90) + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
gender <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90) +theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
### PRC
agePC<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
referralPC<-ggplot(aucTable[aucTable$Subgroup %in% c("PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
historyPC<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal() + theme(legend.position = "top") +  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
genderPC <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+ geom_text(aes(label=PCAUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
#
# tiff("Results/PRC ROC AUC plot 3.tif", width = 20, height = 8, units = "in", res = 110)
# require(gridExtra)
# grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=4)
# dev.off()
tiff("Results/Figure3_250.tif", width = 12, height = 14, units = "in", res = 250)
require(gridExtra)
grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=2)
dev.off()
# tiff("Results/PRC AUC plot.tif", width = 9, height = 8, units = "in", res = 100)
# grid.arrange(agePC, referralPC, historyPC, genderPC, ncol=2)
# dev.off()
