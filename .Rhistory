AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI
View(humanAI)
View(humanAI)
names(humanAI)
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
View(humanAI)
write.csv(humanAI, "Results/humanAI.csv", row.names = F)
names(AI)
View(AI)
names(CAD_Xpert_plot)
CAD_Xpert_plot[,28]
names(AI)
names(CAD_Xpert_plot)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18,27,28)]
View(AI)
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
write.csv(humanAI, "Results/humanAI.csv", row.names = F)
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18,27,28)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18,27,28)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
View(Human)
View(humanAI)
names(AI)
AI
source("radiologist.R")
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18,27,28)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,7,8, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
write.csv(humanAI, "Results/humanAI.csv", row.names = F)
# rm(AI, Human)
View(humanAI)
library("PRROC")
install.packages("PRROC")
####========================================================
# CAD4TB version 6 and verson 6.3 are both included in this script. no need to rerun the cleaning.r, just load different dataset
# line 30-31
####========================================================
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- read.csv("DataWrangling/MDF.6.3.csv")
MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv3_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
# ML <- MDF[, c('PID_OMRS', 'Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv3', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_training <- ML[sample(nrow(ML), 18853), ]
# ML_testing <- subset(ML, !(ML$PID_OMRS %in% ML_training$PID_OMRS))
# write.csv(ML, "DataWrangling/ML.csv", row.names = F)
# write.csv(ML_training, "DataWrangling/ML_training.csv", row.names = F)
# write.csv(ML_testing, "DataWrangling/ML_testing.csv", row.names = F)
####========================================================
# CAD4TB version 6 and verson 6.3 are both included in this script. no need to rerun the cleaning.r, just load different dataset
# line 30-31
####========================================================
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- read.csv("DataWrangling/MDF.6.3.csv")
MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv3_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
# ML <- MDF[, c('PID_OMRS', 'Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv3', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_training <- ML[sample(nrow(ML), 18853), ]
# ML_testing <- subset(ML, !(ML$PID_OMRS %in% ML_training$PID_OMRS))
# write.csv(ML, "DataWrangling/ML.csv", row.names = F)
# write.csv(ML_training, "DataWrangling/ML_training.csv", row.names = F)
# write.csv(ML_testing, "DataWrangling/ML_testing.csv", row.names = F)
names(MDF)
library("PRROC")
pr.curve(scores.class0 = MDF[MDF$Xpert2Outcome_num %in% "0", 23], scores.class1 = MDF[MDF$Xpert2Outcome_num %in% "1", 23])
MDF <- read.csv("DataWrangling/MDF.csv")
pr.curve(scores.class0 = MDF[MDF$Xpert2Outcome_num %in% "0", 23], scores.class1 = MDF[MDF$Xpert2Outcome_num %in% "1", 23])
pr.curve(scores.class0 = MDF[MDF$Xpert2Outcome_num %in% "0", 24], scores.class1 = MDF[MDF$Xpert2Outcome_num %in% "1", 24])
summary(MDF[, 26])
summary(MDF[, 24])
names(MDF)
pr.curve(scores.class0 = MDF[MDF$Xpert2Outcome_num %in% "0", 26], scores.class1 = MDF[MDF$Xpert2Outcome_num %in% "1", 26])
pr.curve(scores.class0 = MDF[MDF$Xpert2Outcome_num %in% "0", 26]/100, scores.class1 = MDF[MDF$Xpert2Outcome_num %in% "1", 26]/100)
pr.curve(scores.class0 = MDF[MDF$Xpert2Outcome_num %in% "0", 27], scores.class1 = MDF[MDF$Xpert2Outcome_num %in% "1", 27])
####========================================================
# CAD4TB version 6 and verson 6.3 are both included in this script. no need to rerun the cleaning.r, just load different dataset
# line 30-31
####========================================================
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
MDF <- read.csv("DataWrangling/MDF.csv")
# MDF <- read.csv("DataWrangling/MDF.6.3.csv")
MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv3_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
# ML <- MDF[, c('PID_OMRS', 'Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv3', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_training <- ML[sample(nrow(ML), 18853), ]
# ML_testing <- subset(ML, !(ML$PID_OMRS %in% ML_training$PID_OMRS))
# write.csv(ML, "DataWrangling/ML.csv", row.names = F)
# write.csv(ML_training, "DataWrangling/ML_training.csv", row.names = F)
# write.csv(ML_testing, "DataWrangling/ML_testing.csv", row.names = F)
names(MDF)
pr.curve(scores.class0 = MDF[MDF$Xpert2Outcome_num %in% "0", 27], scores.class1 = MDF[MDF$Xpert2Outcome_num %in% "1", 27])
pr.curve(scores.class0 = MDF[MDF$Xpert2Outcome_num %in% "0", 28], scores.class1 = MDF[MDF$Xpert2Outcome_num %in% "1", 28])
pr.curve(scores.class0 = MDF[MDF$Xpert2Outcome_num %in% "0", 29], scores.class1 = MDF[MDF$Xpert2Outcome_num %in% "1", 29])
####========================================================
# CAD4TB version 6 and verson 6.3 are both included in this script. no need to rerun the cleaning.r, just load different dataset
# line 30-31
####========================================================
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- read.csv("DataWrangling/MDF.6.3.csv")
MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv3_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
# ML <- MDF[, c('PID_OMRS', 'Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv3', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_training <- ML[sample(nrow(ML), 18853), ]
# ML_testing <- subset(ML, !(ML$PID_OMRS %in% ML_training$PID_OMRS))
# write.csv(ML, "DataWrangling/ML.csv", row.names = F)
# write.csv(ML_training, "DataWrangling/ML_training.csv", row.names = F)
# write.csv(ML_testing, "DataWrangling/ML_testing.csv", row.names = F)
source("radiologist.R")
Radiologist <- Radiologist[Radiologist$Referral %in% "MDF", ]
New <- MDF[MDF$TB.Medication.History %in% "No",]
Old <- MDF[MDF$TB.Medication.History %in% "Yes",]
Female <- MDF[MDF$Gender %in% "F", ]
Male <- MDF[MDF$Gender %in% "M", ]
Young <- MDF[MDF$AgeGroup %in% "[15,25)",]
Middle <- MDF[MDF$AgeGroup %in% "[25,60)",]
Senior <- MDF[MDF$AgeGroup %in% "[60,108]",]
Referral <- subset(MDF, MDF$UseCase %in% "PrivatePublicReferral")
DOTS <- subset(MDF, MDF$UseCase %in% "PublicDOTSRetesting")
WalkIn <- subset(MDF, MDF$UseCase %in% "WalkIn")
# Missing <- subset(MDF, is.na(MDF$UseCase)==T)
New_long <- MDF_long[MDF_long$TB.Medication.History %in% "No",]
Old_long <- MDF_long[MDF_long$TB.Medication.History %in% "Yes",]
Young_long <- MDF_long[MDF_long$AgeGroup %in% "[15,25)",]
Middle_long <- MDF_long[MDF_long$AgeGroup %in% "[25,60)",]
Senior_long <- MDF_long[MDF_long$AgeGroup %in% "[60,108]",]
Referral_long  <- subset(MDF_long, MDF_long$UseCase %in% "PrivatePublicReferral")
DOTS_long  <- subset(MDF_long, MDF_long$UseCase %in% "PublicDOTSRetesting")
WalkIn_long  <- subset(MDF_long, MDF_long$UseCase %in% "WalkIn")
library(precrec)
library(ggplot2)
ROCPRC <- function(dataset){
attr <- attributes(evalmod(scores = dataset$CAD4TB6, labels = dataset$Xpert2Outcome_num))
aucT1 <- c("CAD4TB ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$qXRv3, labels = dataset$Xpert2Outcome_num))
aucT2 <- c("qXR ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$LunitScore, labels = dataset$Xpert2Outcome_num))
aucT3 <- c("Lunit INSIGHT CXR", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$JF1, labels = dataset$Xpert2Outcome_num))
aucT4 <- c("JF CXR-1", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$IF2, labels = dataset$Xpert2Outcome_num))
aucT5 <- c("InferReadDR ", round(attr$auc[4],3))
# return(mmcurves)
# return(autoplot(mmcurves))
aucT <- c(aucT1, aucT2, aucT3, aucT4, aucT5)
return(aucT)
}
l <- ROCPRC(MDF)
all <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
all$subgroup <- "all"
## New only
l <- ROCPRC(New)
New <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
New$subgroup <- "New cases"
## Old only
l <- ROCPRC(Old)
Old <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Old$subgroup <- "Previously treated cases"
## Young
l <- ROCPRC(Young)
Young <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Young$subgroup <- "Young age"
## Middle
l <- ROCPRC(Middle)
Middle <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Middle$subgroup <- "Middle age"
## Senior
l <- ROCPRC(Senior)
Senior <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Senior$subgroup <- "Old age"
## Referral only
l <- ROCPRC(Referral)
Referral <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Referral$subgroup <- "Referred"
## DOTS only
l <- ROCPRC(DOTS)
DOTS <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
DOTS$subgroup <- "DOTS retested"
## Walk-in only
l <- ROCPRC(WalkIn)
WalkIn <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
WalkIn$subgroup <- "WalkIn"
## Female
l <- ROCPRC(Female)
Female <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Female$subgroup <- "Female"
## Male
l <- ROCPRC(Male)
Male <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Male$subgroup <- "Male"
#### stratification by age AND prior TB history
aucTable <- rbind(all, New, Old, Young, Middle, Senior, Referral, DOTS, WalkIn, Female, Male)
colnames(aucTable) <- c("AI.Algorithm", "AUC", "PCAUC", "Subgroup")
aucTable
View(aucTable)
# subgroup 4 curves
SubgroupPlot <- read.csv("Chapter/Subgroup Table/SubgroupTable.csv")
