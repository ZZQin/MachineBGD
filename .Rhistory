Cost <- Cost[Cost$AI %in% c("CAD4TBv6", "CAD4TBv7"), ]
Cost$AI <- as.character(Cost$AI)
### d. Sensitivity vs Score --------------------
base <- ggplot(Cost, aes(Score, Sens)) + geom_path(aes(color = AI)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
sensCurveCAD4TB <- base + theme_light()  + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(Cost, aes(Score, XpertSaved.)) + geom_path(aes(color = AI))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveCAD4TB <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
View(Cost0)
Cost$Totalcostforconfirmatorytest/XpertCost
Cost$XpertTest <- Cost$Totalcostforconfirmatorytest/XpertCost
View(Cost)
Cost$Xpertsaved <- 1-Cost$XpertTest/54125
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
names(MDF)
summary(MDF$MTB.Burden)
table(MDF$MTB.Burden)
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
source("2.0 Version Comparison/Global.R")
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
colnames(Cost) <- gsub(" ","",colnames(Cost))
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
Cost
View(Cost)
names(MDF$CAD4TB7)
names(MDF)
#
maxV<- 101
sep <- 1
## for example, I declare the following values
pop_size <- 54125
prev <- 0.19
XpertCost <- 20
### Set up a function
myfunction <- function(dataset, AI.system, car.cutoff){
a <- sum(AI.system >= car.cutoff & dataset$Xpert2Outcome_num =="1")
b <- sum(AI.system >= car.cutoff & dataset$Xpert2Outcome_num =="0")
c <- sum(AI.system < car.cutoff & dataset$Xpert2Outcome_num =="1")
d <- sum(AI.system < car.cutoff & dataset$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$elements$sensitivity),8))
specificity <- as.vector(round((rval$elements$specificity),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(dataset$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(dataset$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
return(accuracy)
}
################ MDF #####################################
AI.score <- seq(0, 1, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv7
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$CAD4TBv7, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
################ MDF #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv7
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$CAD4TBv7, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
summary(MDF$CAD4TBv6)
summary(MDF$CAD4TBv7)
summary(MDF$Xpert2Outcome_num)
a <- sum(MDF$CAD4TBv7 >= 20 & MDF$Xpert2Outcome_num =="1")
A
a
################ MDF #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv7
for (i in 1 : maxV){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$elements$sensitivity),8))
specificity <- as.vector(round((rval$elements$specificity),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(MDF$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
mylist[[i]] <- list(cutoff.accuracy)
}
AI.s
AI.score[2]
AI.score[101]
# CAD4TBv7
for (i in 0 : maxV){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$elements$sensitivity),8))
specificity <- as.vector(round((rval$elements$specificity),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(MDF$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
mylist[[i]] <- list(cutoff.accuracy)
}
AI.score[0]
AI.score[1]
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
# CAD4TBv7
for (i in 1 : 1){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
}
rval
# CAD4TBv7
for (i in 20 : 20){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
}
rval
rval$elements$sensitivity
rval$se
rval$tab
rval$detail$se
sensitivity <- as.vector(round((rval$detail$se),8))
specificity <- as.vector(round((rval$detail$sp),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(MDF$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
View(accuracy)
# CAD4TBv7
for (i in 1 : 100){
a <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="1")
b <- sum(MDF$CAD4TBv7 >= AI.score[i] & MDF$Xpert2Outcome_num =="0")
c <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="1")
d <- sum(MDF$CAD4TBv7 < AI.score[i] & MDF$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$detail$se),8))
specificity <- as.vector(round((rval$detail$sp),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(MDF$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(MDF$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
}
mylist[[i]] <- list(accuracy)
MDF.CAD4TBv7 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
MDF.CAD4TBv7$Subgroup  <- paste("MDF")
View(MDF.CAD4TBv7)
View(MDF.CAD4TBv7)
source("02_Chapter/SubGroup.R")
source("02_Chapter/SubGroup.R")
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
## for example, I declare the following values
pop_size <- 54125
prev <- 0.19
XpertCost <- 20
#
maxV<- 101
sep <- 0.01
sepdeflt <- 1
### Set up a function
myfunction <- function(dataset, AI.system, car.cutoff){
a <- sum(AI.system >= car.cutoff & dataset$CompRef =="1")
b <- sum(AI.system >= car.cutoff & dataset$CompRef =="0")
c <- sum(AI.system < car.cutoff & dataset$CompRef =="1")
d <- sum(AI.system < car.cutoff & dataset$CompRef =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$detail$se),8))
specificity <- as.vector(round((rval$detail$sp),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(dataset$CompRef =="1"))
CAD_Pos_Normal <- b/(sum(dataset$CompRef =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
return(accuracy)
}
################ MDF.Lab #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TB7
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF.Lab, MDF.Lab$CAD4TB7, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
names(MDF)
### Set up a function
myfunction <- function(dataset, AI.system, car.cutoff){
a <- sum(AI.system >= car.cutoff & dataset$Xpert2Outcome_num =="1")
b <- sum(AI.system >= car.cutoff & dataset$Xpert2Outcome_num =="0")
c <- sum(AI.system < car.cutoff & dataset$Xpert2Outcome_num =="1")
d <- sum(AI.system < car.cutoff & dataset$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$detail$se),8))
specificity <- as.vector(round((rval$detail$sp),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(dataset$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(dataset$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
return(accuracy)
}
################ MDF #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv7
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$CAD4TBv7, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
MDF.CAD4TBv7 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
MDF.CAD4TBv7$Subgroup  <- paste("MDF")
View(MDF.CAD4TBv7)
################ CAD4TBv6 #####################################
AI.score <- seq(0, 100, by = sep)
################ CAD4TBv6 #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv6
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$CAD4TBv6, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
MDF.CAD4TBv6 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
MDF.CAD4TBv6$Subgroup  <- paste("MDF")
MDF.CAD4TBv6$AI <- paste("CAD4TBv6")
View(MDF.CAD4TBv6)
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv6
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$CAD4TBv6, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
MDF.CAD4TBv6 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
MDF.CAD4TBv6$Subgroup  <- paste("MDF")
MDF.CAD4TBv6$AI <- paste("CAD4TBv6")
MDF.CAD4TBv7$AI <- paste("CAD4TBv7")
######### Merge DFs ######
CAD_Xpert <- c(MDF.CAD4TBv7, MDF.CAD4TBv6, MDF.qXRv2, MDF.qXRv3)
################ qXRv2 #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# qXRv2
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$qXRv2, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
MDF.qXRv2 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
MDF.qXRv2$Subgroup  <- paste("MDF")
MDF.qXRv2$AI <- paste("qXRv2")
################ qXRv3 #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# qXRv3
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$qXRv3, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
MDF.qXRv3 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
MDF.qXRv3$Subgroup  <- paste("MDF")
MDF.qXRv3$AI <- paste("qXRv3")
######### Merge DFs ######
CAD_Xpert <- c(MDF.CAD4TBv7, MDF.CAD4TBv6, MDF.qXRv2, MDF.qXRv3)
colnames(CAD_Xpert)[1] <- "Score"
colnames(CAD_Xpert)[2] <- "Sens"
colnames(CAD_Xpert)[3] <- "Sens_L"
colnames(CAD_Xpert)[4] <- "Sens_H"
colnames(CAD_Xpert)[5] <- "Spec"
colnames(CAD_Xpert)[6] <- "Spec_L"
colnames(CAD_Xpert)[7] <- "Spec_H"
colnames(CAD_Xpert)[8] <- "CAD_Pos_TB"
colnames(CAD_Xpert)[9] <- "CAD_Pos_Normal"
CAD_Xpert$ppv <- (CAD_Xpert$Sens * prev)/(CAD_Xpert$Sens * prev + (1-CAD_Xpert$Spec)*(1-prev))
CAD_Xpert$npv <- (CAD_Xpert$Spec * (1-prev))/((CAD_Xpert$Spec * (1-prev))+(1-CAD_Xpert$Sens)*prev)
CAD_Xpert$CAD_Pos <- (pop_size*prev*CAD_Xpert$CAD_Pos_TB + (pop_size-pop_size*prev)*CAD_Xpert$CAD_Pos_Normal)/pop_size
CAD_Xpert$XpertSaved <- 1-CAD_Xpert$CAD_Pos
CAD_Xpert$Comment <- ""
CAD_Xpert$Comment[which(abs(CAD_Xpert$Sens-0.9) == min(abs(CAD_Xpert$Sens-0.9)))] <- "90% sens"
CAD_Xpert$Comment[which(abs(CAD_Xpert$Spec-0.7) == min(abs(CAD_Xpert$Spec-0.7)))] <- "70% spec"
View(CAD_Xpert)
CAD_Xpert$Comment[which(abs(CAD_Xpert$XpertSaved-0.5) == min(abs(CAD_Xpert$XpertSaved-0.5)))] <- "1/2 Xpert Saved"
CAD_Xpert$Comment[which(abs(CAD_Xpert$XpertSaved-2/3) == min(abs(CAD_Xpert$XpertSaved-2/3)))] <- "2/3 Xpert Saved"
CAD_Xpert$Comment[which(abs(CAD_Xpert$XpertSaved-0.75) == min(abs(CAD_Xpert$XpertSaved-0.75)))] <- "3/4 Xpert Saved"
CAD_Xpert$X <- 1-CAD_Xpert$Spec
CAD_Xpert$nnt <- 1/CAD_Xpert$ppv
CAD_Xpert$AI <- as.character(CAD_Xpert$AI)
######### Merge DFs ######
CAD_Xpert <- rbind(MDF.CAD4TBv7, MDF.CAD4TBv6, MDF.qXRv2, MDF.qXRv3)
colnames(CAD_Xpert)[1] <- "Score"
colnames(CAD_Xpert)[2] <- "Sens"
colnames(CAD_Xpert)[3] <- "Sens_L"
colnames(CAD_Xpert)[4] <- "Sens_H"
colnames(CAD_Xpert)[5] <- "Spec"
colnames(CAD_Xpert)[6] <- "Spec_L"
colnames(CAD_Xpert)[7] <- "Spec_H"
colnames(CAD_Xpert)[8] <- "CAD_Pos_TB"
colnames(CAD_Xpert)[9] <- "CAD_Pos_Normal"
CAD_Xpert$ppv <- (CAD_Xpert$Sens * prev)/(CAD_Xpert$Sens * prev + (1-CAD_Xpert$Spec)*(1-prev))
CAD_Xpert$npv <- (CAD_Xpert$Spec * (1-prev))/((CAD_Xpert$Spec * (1-prev))+(1-CAD_Xpert$Sens)*prev)
CAD_Xpert$CAD_Pos <- (pop_size*prev*CAD_Xpert$CAD_Pos_TB + (pop_size-pop_size*prev)*CAD_Xpert$CAD_Pos_Normal)/pop_size
CAD_Xpert$XpertSaved <- 1-CAD_Xpert$CAD_Pos
CAD_Xpert$Comment <- ""
CAD_Xpert$Comment[which(abs(CAD_Xpert$Sens-0.9) == min(abs(CAD_Xpert$Sens-0.9)))] <- "90% sens"
CAD_Xpert$Comment[which(abs(CAD_Xpert$Spec-0.7) == min(abs(CAD_Xpert$Spec-0.7)))] <- "70% spec"
View(CAD_Xpert)
CAD_Xpert$Comment[which(abs(CAD_Xpert$XpertSaved-0.5) == min(abs(CAD_Xpert$XpertSaved-0.5)))] <- "1/2 Xpert Saved"
CAD_Xpert$Comment[which(abs(CAD_Xpert$XpertSaved-2/3) == min(abs(CAD_Xpert$XpertSaved-2/3)))] <- "2/3 Xpert Saved"
CAD_Xpert$Comment[which(abs(CAD_Xpert$XpertSaved-0.75) == min(abs(CAD_Xpert$XpertSaved-0.75)))] <- "3/4 Xpert Saved"
CAD_Xpert$X <- 1-CAD_Xpert$Spec
CAD_Xpert$nnt <- 1/CAD_Xpert$ppv
CAD_Xpert$AI <- as.character(CAD_Xpert$AI)
#################Save ###############
write.csv(CAD_Xpert, "Results/Modelling/Modeling.csv", row.names = F)
#################Save ###############
write.csv(CAD_Xpert, "Results/Modeling.csv", row.names = F)
### PLOT ######
### a. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert, aes(Score, Sens)) + geom_path(aes(color = AI))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("a. The Sensitivity vs abnormality score (n=", pop_size, ")"))  + theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.5, 0.3, 0.7), linetype="dotted", color = "black", size=1)  +  geom_hline(yintercept = 0.9, linetype="dotted", color = "black", size=1)
### PLOT ######
### a. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert, aes(Score, Sens)) + geom_path(aes(color = AI))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("a. The Sensitivity vs abnormality score (n=", pop_size, ")"))  + theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.5, 0.3, 0.7), linetype="dotted", color = "black", size=1)  +  geom_hline(yintercept = 0.9, linetype="dotted", color = "black", size=1)
### d. NNT --------------------
CAD_Xpert$nnt <- 1/CAD_Xpert$ppv
base <- ggplot(CAD_Xpert, aes(Score, nnt)) + geom_path(aes(color = AI))
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("d. The NNT vs abnormality score (n=", pop_size, ")")) +theme(legend.position = c(1,1),legend.justification = c("right", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.5, 0.7, 0.3), linetype="dotted", color = "black", size=1)
NNTCurve
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### b. Xpert Saved vs Score --------------------
### Xpert saved ----
base <- ggplot(CAD_Xpert, aes(Score, XpertSaved)) + geom_path(aes(color = AI))
XpertSavingCurve <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved",subtitle = paste0("b. The Xpert Saved (n=", pop_size, ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.10), breaks = seq(0, 1, 0.10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.5, 0.6, 0.7), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert, aes(XpertSaved, Sens)) + geom_path(aes(color = AI, fill = AI))
# + geom_ribbon(aes(x = XpertSaved, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", pop_size, ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.5, 0.66, 0.75), linetype="dotted", color =  "black", size=1) + geom_hline(yintercept = c(0.9, 0.7), linetype="dotted", color = "black", size=1)
XpertSens
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurve, XpertSavingCurve, XpertSens, NNTCurve,  nrow=2)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
### PLOT ######
### a. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert, aes(Score, Sens)) + geom_path(aes(color = AI))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("a. The Sensitivity vs abnormality score (n=", pop_size, ")"))  + theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 1), breaks = seq(0, 100, 1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.5, 0.3, 0.7), linetype="dotted", color = "black", size=1)  +  geom_hline(yintercept = 0.9, linetype="dotted", color = "black", size=1)
### d. NNT --------------------
CAD_Xpert$nnt <- 1/CAD_Xpert$ppv
base <- ggplot(CAD_Xpert, aes(Score, nnt)) + geom_path(aes(color = AI))
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("d. The NNT vs abnormality score (n=", pop_size, ")")) +theme(legend.position = c(1,1),legend.justification = c("right", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 1), breaks = seq(0, 100, 1))+ geom_vline(xintercept = c(0.5, 0.7, 0.3), linetype="dotted", color = "black", size=1)
NNTCurve
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### b. Xpert Saved vs Score --------------------
### Xpert saved ----
base <- ggplot(CAD_Xpert, aes(Score, XpertSaved)) + geom_path(aes(color = AI))
XpertSavingCurve <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved",subtitle = paste0("b. The Xpert Saved (n=", pop_size, ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 1), breaks = seq(0, 100, 1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.5, 0.6, 0.7), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert, aes(XpertSaved, Sens)) + geom_path(aes(color = AI, fill = AI))
# + geom_ribbon(aes(x = XpertSaved, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", pop_size, ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 1), breaks = seq(0, 100, 1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.5, 0.66, 0.75), linetype="dotted", color =  "black", size=1) + geom_hline(yintercept = c(0.9, 0.7), linetype="dotted", color = "black", size=1)
XpertSens
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurve, XpertSavingCurve, XpertSens, NNTCurve,  nrow=2)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("a. The Sensitivity vs abnormality score (n=", pop_size, ")"))  + theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 1), breaks = seq(0, 100, 1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)  +  geom_hline(yintercept = 0.9, linetype="dotted", color = "black", size=1)
### d. NNT --------------------
CAD_Xpert$nnt <- 1/CAD_Xpert$ppv
base <- ggplot(CAD_Xpert, aes(Score, nnt)) + geom_path(aes(color = AI))
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("d. The NNT vs abnormality score (n=", pop_size, ")")) +theme(legend.position = c(1,1),legend.justification = c("right", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 1), breaks = seq(0, 100, 1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
NNTCurve
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### b. Xpert Saved vs Score --------------------
### Xpert saved ----
base <- ggplot(CAD_Xpert, aes(Score, XpertSaved)) + geom_path(aes(color = AI))
XpertSavingCurve <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved",subtitle = paste0("b. The Xpert Saved (n=", pop_size, ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 1), breaks = seq(0, 100, 1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert, aes(XpertSaved, Sens)) + geom_path(aes(color = AI, fill = AI))
# + geom_ribbon(aes(x = XpertSaved, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", pop_size, ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 1), breaks = seq(0, 100, 1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color =  "black", size=1) + geom_hline(yintercept = c(0.9, 0.7), linetype="dotted", color = "black", size=1)
XpertSens
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurve, XpertSavingCurve, XpertSens, NNTCurve,  nrow=2)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
# qXR ----
CAD_Xpert0 <- CAD_Xpert
CAD_Xpert <- CAD_Xpert[CAD_Xpert$AI %in% c("qXRv2", "qXRv3"), ]
CAD_Xpert$AI <- as.character(CAD_Xpert$AI)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert, aes(Score, Sens)) + geom_path(aes(color = AI)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert, aes(Score, XpertSaved.)) + geom_path(aes(color = AI))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
XpertSavingCurveqXR
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert, aes(Score, XpertSaved)) + geom_path(aes(color = AI))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
XpertSavingCurveqXR
base <- ggplot(CAD_Xpert, aes(Score, Sens)) + geom_path(aes(color = AI)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = AI, fill = AI), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
sensCurveqXR
names(CAD_Xpert)
summary(CAD_Xpert)
summary(MDF.CAD4TBv7)
summary(MDF.CAD4TBv6)
summary(MDF.qXRv2)
summary(MDF.qXRv3)
maxV
unique(MDF$CAD4TBv6)
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv6
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$CAD4TBv6, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
MDF.CAD4TBv6 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
MDF.CAD4TBv6$Subgroup  <- paste("MDF")
MDF.CAD4TBv6$AI <- paste("CAD4TBv6")
summary(MDF.CAD4TBv6)
### Set up a function
myfunction <- function(dataset, AI.system, car.cutoff){
a <- sum(AI.system >= car.cutoff & dataset$Xpert2Outcome_num =="1")
b <- sum(AI.system >= car.cutoff & dataset$Xpert2Outcome_num =="0")
c <- sum(AI.system < car.cutoff & dataset$Xpert2Outcome_num =="1")
d <- sum(AI.system < car.cutoff & dataset$Xpert2Outcome_num =="0")
dat <- as.table(matrix(c(a,b,c,d), nrow = 2, byrow = TRUE))
rval <- epi.tests(dat, conf.level = 0.95)
sensitivity <- as.vector(round((rval$detail$se),8))
specificity <- as.vector(round((rval$detail$sp),8))
Score <- AI.score[i]
CAD_Pos_TB <- a/(sum(dataset$Xpert2Outcome_num =="1"))
CAD_Pos_Normal <- b/(sum(dataset$Xpert2Outcome_num =="0"))
accuracy <- cbind(Score, sensitivity, specificity, CAD_Pos_TB, CAD_Pos_Normal)
return(accuracy)
}
################ CAD4TBv6 #####################################
AI.score <- seq(0, 100, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# CAD4TBv6
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(MDF, MDF$CAD4TBv6, AI.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
MDF.CAD4TBv6 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
MDF.CAD4TBv6$Subgroup  <- paste("MDF")
MDF.CAD4TBv6$AI <- paste("CAD4TBv6")
