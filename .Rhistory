CAD_Xpert$accuracy <- round(CAD_Xpert$accuracy, 3)
CAD_Xpert$DeepLearningSystem <- as.character(CAD_Xpert$DeepLearningSystem)
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "Infervision"] <- "InferReadDR"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "Lunit"] <- "Lunit INSIGHT CXR"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "CAD4TB"] <- "CAD4TB"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "qXR"] <- "qXR"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "JF1"] <- "JF CXR-1"
CAD_Xpert$Score[CAD_Xpert$DeepLearningSystem %in% "CAD4TB"] <- CAD_Xpert$Score[CAD_Xpert$DeepLearningSystem %in% "CAD4TB"]/100
tapply(CAD_Xpert$Score, CAD_Xpert$DeepLearningSystem, summary)
################ updating qXRv3 ----------------------
# CAD_Xpert <- read.csv("Results/CAD_Xpert_Precise.csv")
#
# CAD_Xpert_noBGDqXR <- CAD_Xpert[!(CAD_Xpert$Site %in% "BGD" & CAD_Xpert$DeepLearningSystem %in% "qXR"), ]
#
# BGD.qXR3 <- BGD.qXR3[, c(1:23, 27:30, 24:26, 31 )]
# colnames(CAD_Xpert_noBGDqXR)[13] <- "%XpertSaved"
#
# CAD_Xpert <- rbind(CAD_Xpert_noBGDqXR, BGD.qXR3)
################################
# SuppTable <- CAD_Xpert[, c(16, 17, 14, 27:31, 13, 15)]
# View(SuppTable)
CAD_Xpert_plot <- CAD_Xpert[, c(16, 17, 14, 13, 15, 1:12, 19, 28:30)]
write.csv(CAD_Xpert, "Results/CAD_Xpert_qXR3.csv", row.names = F)
write.csv(CAD_Xpert_plot, "Results/CAD_Xpert Cutoffs TABLE.csv", row.names = F)
# write.csv(SuppTable, "Results/Supp Tab.csv", row.names = F)
#
# rm(CAM.DF, NPL.DF, BGD.DF, i, DL.score, mylist, cutoff.accuracy, NPL, CAM, BGD.DF, BGD)
#
#
names(CAD_Xpert)
summary(CAD_Xpert$DeepLearningSystem)
table(CAD_Xpert$DeepLearningSystem)
write.csv(CAD_Xpert, "Results/CAD_Xpert_Precise.csv", row.names = F)
View(CAD_Xpert)
source("radiologist.R")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
Radiologist <- Radiologist[Radiologist$Referral %in% "MDF", ]
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
roc_CAD6 <- ci.auc(Xpert2Outcome_num ~ CAD4TB6, MDF)
roc_qure <- ci.auc(Xpert2Outcome_num ~ qXRv3_100, MDF)
roc_Lunit <- ci.auc(Xpert2Outcome_num ~ LunitScore_100, MDF)
roc_JF1 <- ci.auc(Xpert2Outcome_num ~ JF1_100, MDF)
roc_JF2 <- ci.auc(Xpert2Outcome_num ~ JF2_100, MDF)
roc_IF1 <- ci.auc(Xpert2Outcome_num ~ IF1_100, MDF)
roc_IF2 <- ci.auc(Xpert2Outcome_num ~ IF2_100, MDF)
roc_IF3 <- ci.auc(Xpert2Outcome_num ~ IF3_100, MDF)
# library(pROC)
# roc1 <- roc(Xpert2Outcome_num ~ CAD4TB6, MDF)
# roc2 <- roc(Xpert2Outcome_num ~ qXRv3_100, MDF)
# cov(roc1, roc2, method="obuchowski")
# cov(roc1, roc2, method="delong")
# base <- ggplot(CAD_Xpert_plot, aes(X, Sens, color = DeepLearningSystem)) + geom_path()+ geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H), fill = "red", alpha= 0.2)
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) +
geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ggROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal()+ annotate("text", x = .75, y = .15, label = paste("Lunit INSIGHT CXR: ", round(roc_Lunit[2],2), " (95% CI:", round(roc_Lunit[1],2), "-", round(roc_Lunit[3],2), ")", "\n", "qXR: ", round(roc_qure[2],2), " (95% CI:", round(roc_qure[1],2), "-", round(roc_qure[3],2), ")", "\n", "InferReadDR: ", round(roc_IF2[2],2), " (95% CI:", round(roc_IF2[1],2), "-", round(roc_IF2[3],2), ")", "\n", "JF CXR-1: ", round(roc_JF1[2],2), " (95% CI:", round(roc_JF1[1],2), "-", round(roc_JF1[3],2), ")", "\n",  "CAD4TB: ", round(roc_CAD6[2],2), " (95% CI:", round(roc_CAD6[1],2), "-", round(roc_CAD6[3],2), ")", sep = ""), size = 3) +
labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("Figure X: The ROC curves of  CAD4TB(v6), Infervision(v2), JF CXR-1, Lunit(4.9.0) and qXR(v2) using Xpert results as the reference (n=", length(MDF$PID_OMRS), ")"))
ggROC <- ggROC + geom_point(data = Radiologist, mapping = aes(X, Sens, shape = AccuracyTableCategory)) + geom_hline(yintercept = c(0.9, 0.95), linetype="dotted", color = "blue", size=1)
#
# tiff("Results/Figure-2 ROCs.tif", width = 10, height = 7.9, units = "in", res = 100)
# ggROC
# dev.off()
#
# ggROC1 <- ggROC + coord_cartesian(xlim = c(0.25, 0.5), ylim = c(0.90, 1) ) +
#   ggtitle("ROC")+theme_light()
#
# tiff("Results/ROC Zoomed-in", width = 8, height = 3.2, units = "in", res = 100)
# ggROC1
# dev.off()
AUC <- paste("Lunit INSIGHT CXR: ", round(roc_Lunit[2],4), " (95% CI:", round(roc_Lunit[1],4), "-", round(roc_Lunit[3],4), ")", ", ",
"qXR: ", round(roc_qure[2],4), " (95% CI:", round(roc_qure[1],4), "-", round(roc_qure[3],4), ")", ", ",
"InferReadDR: ", round(roc_IF2[2],4), " (95% CI:", round(roc_IF2[1],4), "-", round(roc_IF2[3],4), ")", ", ",
"JF CXR-1: ", round(roc_JF1[2],4), " (95% CI:", round(roc_JF1[1],4), "-", round(roc_JF1[3],4), ")", ", ",
"CAD4TB: ", round(roc_CAD6[2],4), " (95% CI:", round(roc_CAD6[1],4), "-", round(roc_CAD6[3],4), ")",sep = "")
# rm(roc_CAD6, roc_JF1, roc_JF2, roc_qure, roc_Lunit, roc_IF1, roc_IF2, roc_IF3, dat)
AUC
source("radiologist.R")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
Radiologist <- Radiologist[Radiologist$Referral %in% "MDF", ]
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
roc_CAD6 <- ci.auc(Xpert2Outcome_num ~ CAD4TB6, MDF)
roc_qure <- ci.auc(Xpert2Outcome_num ~ qXRv3_100, MDF)
roc_Lunit <- ci.auc(Xpert2Outcome_num ~ LunitScore_100, MDF)
roc_JF1 <- ci.auc(Xpert2Outcome_num ~ JF1_100, MDF)
roc_JF2 <- ci.auc(Xpert2Outcome_num ~ JF2_100, MDF)
roc_IF1 <- ci.auc(Xpert2Outcome_num ~ IF1_100, MDF)
roc_IF2 <- ci.auc(Xpert2Outcome_num ~ IF2_100, MDF)
roc_IF3 <- ci.auc(Xpert2Outcome_num ~ IF3_100, MDF)
# library(pROC)
# roc1 <- roc(Xpert2Outcome_num ~ CAD4TB6, MDF)
# roc2 <- roc(Xpert2Outcome_num ~ qXRv3_100, MDF)
# cov(roc1, roc2, method="obuchowski")
# cov(roc1, roc2, method="delong")
# base <- ggplot(CAD_Xpert_plot, aes(X, Sens, color = DeepLearningSystem)) + geom_path()+ geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H), fill = "red", alpha= 0.2)
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) +
geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ggROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal()+ annotate("text", x = .75, y = .15, label = paste("Lunit INSIGHT CXR: ", round(roc_Lunit[2],2), " (95% CI:", round(roc_Lunit[1],2), "-", round(roc_Lunit[3],2), ")", "\n", "qXR: ", round(roc_qure[2],2), " (95% CI:", round(roc_qure[1],2), "-", round(roc_qure[3],2), ")", "\n", "InferReadDR: ", round(roc_IF2[2],2), " (95% CI:", round(roc_IF2[1],2), "-", round(roc_IF2[3],2), ")", "\n", "JF CXR-1: ", round(roc_JF1[2],2), " (95% CI:", round(roc_JF1[1],2), "-", round(roc_JF1[3],2), ")", "\n",  "CAD4TB: ", round(roc_CAD6[2],2), " (95% CI:", round(roc_CAD6[1],2), "-", round(roc_CAD6[3],2), ")", sep = ""), size = 3) +
labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("Figure X: The ROC curves of  CAD4TB(v6), Infervision(v2), JF CXR-1, Lunit(4.9.0) and qXR(v2) using Xpert results as the reference (n=", length(MDF$PID_OMRS), ")"))
ggROC <- ggROC + geom_point(data = Radiologist, mapping = aes(X, Sens, shape = AccuracyTableCategory)) + geom_hline(yintercept = c(0.9, 0.95), linetype="dotted", color = "blue", size=1)
tiff("Results/Figure-2 ROCs.tif", width = 10, height = 7.9, units = "in", res = 100)
ggROC
dev.off()
ggROC1 <- ggROC + coord_cartesian(xlim = c(0.25, 0.5), ylim = c(0.90, 1) ) +
ggtitle("ROC")+theme_light()
tiff("Results/ROC Zoomed-in", width = 8, height = 3.2, units = "in", res = 100)
ggROC1
dev.off()
AUC <- paste("Lunit INSIGHT CXR: ", round(roc_Lunit[2],4), " (95% CI:", round(roc_Lunit[1],4), "-", round(roc_Lunit[3],4), ")", ", ",
"qXR: ", round(roc_qure[2],4), " (95% CI:", round(roc_qure[1],4), "-", round(roc_qure[3],4), ")", ", ",
"InferReadDR: ", round(roc_IF2[2],4), " (95% CI:", round(roc_IF2[1],4), "-", round(roc_IF2[3],4), ")", ", ",
"JF CXR-1: ", round(roc_JF1[2],4), " (95% CI:", round(roc_JF1[1],4), "-", round(roc_JF1[3],4), ")", ", ",
"CAD4TB: ", round(roc_CAD6[2],4), " (95% CI:", round(roc_CAD6[1],4), "-", round(roc_CAD6[3],4), ")",sep = "")
# rm(roc_CAD6, roc_JF1, roc_JF2, roc_qure, roc_Lunit, roc_IF1, roc_IF2, roc_IF3, dat)
rm(roc_CAD6, roc_JF1, roc_JF2, roc_qure, roc_Lunit, roc_IF1, roc_IF2, roc_IF3, dat)
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF.Lab$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF.Lab$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, X.XpertSaved)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF.Lab$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(X.XpertSaved, Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = X.XpertSaved, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF.Lab$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF.Lab$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF.Lab$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF.Lab$PID), ")"))  + theme(legend.position = "none") +theme(legend.position = c(0.95,0.95), legend.justification = c("right", "top"))
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
PRC
### Save --------------------
tiff("Results/5 Curves.tif", width = 8, height = 12, units = "in", res = 100)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, X.XpertSaved)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(X.XpertSaved, Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = X.XpertSaved, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none") +theme(legend.position = c(0.95,0.95), legend.justification = c("right", "top"))
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
PRC
### Save --------------------
tiff("Results/5 Curves.tif", width = 8, height = 12, units = "in", res = 100)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, X.XpertSaved)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(X.XpertSaved, Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = X.XpertSaved, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none") +theme(legend.position = c(0.95,0.95), legend.justification = c("right", "top"))
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
PRC
### Save --------------------
tiff("Results/5 Curves.tif", width = 8, height = 12, units = "in", res = 100)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
source("DataWrangling/GlobalOption.R")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurve <- base + theme_light() + coord_equal() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("d. The Sensitivity vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
### f. NNT --------------------
CAD_Xpert_plot$nnt <- 1/CAD_Xpert_plot$ppv
base <- ggplot(CAD_Xpert_plot, aes(Score, nnt)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = NNT_L, ymax = NNT_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
NNTCurve <- base + theme_light()  + labs(x = "Abnormality Score", y= "NNT", subtitle = paste0("f. The NNT vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(legend.position = c(0.05,0.95), legend.justification = c("left", "top"))
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, X.XpertSaved)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurve <- base + theme_light() + coord_equal() + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("e. The Xpert Saved vs abnormality score (n=", length(MDF$PID), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### c. Sens vs Xpert Saved--------------------
base <- ggplot(CAD_Xpert_plot, aes(X.XpertSaved, Sens)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(aes(x = X.XpertSaved, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
XpertSens <- base + theme_light() + coord_equal() + labs(x = "Xpert Saved", y= "Sensitivity", subtitle = paste0("c. The Xpert Saved vs sensitivity (n=", length(MDF$PID), ")")) +theme(legend.position = c(0.05,0.05), legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))
# + geom_vline(xintercept = c(0.5, 2/3), linetype="longdash", color = c("goldenrod2", "deepskyblue"), size=1) + geom_hline(yintercept = 0.95, linetype="solid", color = "mediumvioletred", size=1)
# XpertSens
### Specificity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Spec)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Score <0.95), aes(x = Score, ymin = Spec_L, ymax = Spec_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
SpecScore <- base + theme_light() + coord_equal() + labs(x = "Score", y= "Specificity", subtitle = paste0("The specificity vs abnormality score (n=", length(MDF$PID), ")")) +theme(
legend.position = c(0.05,0.95),
legend.justification = c("left", "top")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(0.8, 0.7), linetype="dotted", color = "black", size=1)+theme(legend.position = "none")
#### a. ROC --------------------
CAD_Xpert_plot$X_L <- 1-CAD_Xpert_plot$Spec_H
CAD_Xpert_plot$X_H <- 1-CAD_Xpert_plot$Spec_L
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) + geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(y = Sens, xmin = X_L, xmax = X_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal() +   labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("a. The ROC curves (n=", length(MDF$PID), ")"))  +theme(legend.position = c(0.95,0.05), legend.justification = c("right", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + theme(legend.position = "none")
ggROC <- ROC + theme(legend.position = "none")
### b. PRC ------
base <- ggplot(CAD_Xpert_plot, aes(Sens, ppv)) + geom_path(aes(color = DeepLearningSystem, fill = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +
geom_ribbon(data = CAD_Xpert_plot %>% filter(Sens >0.02), aes(x = Sens, ymin = PPV_L, ymax = PPV_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
PRC <- base + theme_light() + coord_equal() + labs(x = "Recall (Sensitivity)", y= "Precision (PPV)", subtitle = paste0("b. The Precision Recall Curve (n=", length(MDF$PID), ")"))  + theme(legend.position = "none") +theme(legend.position = c(0.95,0.95), legend.justification = c("right", "top"))
# +theme(legend.position = c(0.95,-0.7), legend.justification = c("right", "bottom"))
PRC
### Save --------------------
tiff("Results/5 Curves.tif", width = 8, height = 12, units = "in", res = 100)
require(gridExtra)
grid.arrange(ggROC, sensCurve, PRC, XpertSavingCurve, XpertSens, NNTCurve,  nrow=3)
# grid.arrange(sensCurve, ggROC, XpertSavingCurve, PRC, NNTCurve, XpertSens, nrow=3)
dev.off()
source("DataWrangling/GlobalOption.R")
HumanReader <- function (dataset){
### Highly suggestive of TB -------------------------------
TP <- sum(dataset$rad.highly.TB %in% "1" & dataset$Xpert2Outcome_num==1)
FP <- sum(dataset$rad.highly.TB %in% 1 & dataset$Xpert2Outcome_num==0)
TN <- sum(dataset$rad.highly.TB %in% 0 & dataset$Xpert2Outcome_num==0)
FN <- sum(dataset$rad.highly.TB %in% 0 & dataset$Xpert2Outcome_num==1)
dat <- as.table(matrix(c(TP, FP, FN, TN), nrow=2, byrow=TRUE))
colnames(dat) <- c("Xpert+","Xpert-")
rownames(dat) <- c("CXR+","CXR-")
rval <- epi.tests(dat, conf.level = 0.95)
rval
Highly <- rval$elements[c(59, 55)]
rm(TP, FP, TN, FN)
###  High+possible ----------------------------
TP <- sum(dataset$rad.TB %in% "1" & dataset$Xpert2Outcome_num==1)
FP <- sum(dataset$rad.TB %in% 1 & dataset$Xpert2Outcome_num==0)
TN <- sum(dataset$rad.TB %in% 0 & dataset$Xpert2Outcome_num==0)
FN <- sum(dataset$rad.TB %in% 0 & dataset$Xpert2Outcome_num==1)
dat <- as.table(matrix(c(TP, FP, FN, TN), nrow=2, byrow=TRUE))
colnames(dat) <- c("Xpert+","Xpert-")
rownames(dat) <- c("CXR+","CXR-")
rval <- epi.tests(dat, conf.level = 0.95)
rval
Probably <- rval$elements[c(59, 55)]
rm(TP, FP, TN, FN)
### Any abnormalities ------------------------------
TP <- sum(dataset$rad.abn %in% "1" & dataset$Xpert2Outcome_num==1)
FP <- sum(dataset$rad.abn %in% 1 & dataset$Xpert2Outcome_num==0)
TN <- sum(dataset$rad.abn %in% 0 & dataset$Xpert2Outcome_num==0)
FN <- sum(dataset$rad.abn %in% 0 & dataset$Xpert2Outcome_num==1)
dat <- as.table(matrix(c(TP, FP, FN, TN), nrow=2, byrow=TRUE))
colnames(dat) <- c("Xpert+","Xpert-")
rownames(dat) <- c("CXR+","CXR-")
rval <- epi.tests(dat, conf.level = 0.95)
rval
Any <- rval$elements[c(59, 55)]
rm(TP, FP, TN, FN)
AccuracyTable <- data.frame(matrix(unlist(c(Highly, Probably, Any)), nrow = 3, byrow = T))
colnames(AccuracyTable) <- c("Sens", "Sens_L", "Sens_H", "Spec", "Spec_L", "Spec_H")
AccuracyTable$X <- 1-AccuracyTable$Spec
AccuracyTable$AccuracyTableCategory <- c("Highly Suggestive", "Probably TB", "Any Abnormality")
AccuracyTable$Referral <- deparse(substitute(dataset))
rm(Highly, Probably, Any, rval)
return(AccuracyTable)
}
allReferral <- HumanReader(MDF)
Referral <- HumanReader(subset(MDF, MDF$UseCase %in% "PrivatePublicReferral"))
DOTS <- HumanReader(subset(MDF, MDF$UseCase %in% "PublicDOTSRetesting"))
WalkIn <- HumanReader(subset(MDF, MDF$UseCase %in% "WalkIn"))
Missing <- HumanReader(subset(MDF, is.na(MDF$UseCase)==T))
Radiologist <- rbind(allReferral, Referral, DOTS, WalkIn, Missing)
rm(allReferral, Referral, DOTS, WalkIn, Missing)
Radiologist$Sensitivity <- paste0(percent(Radiologist$Sens), ", (", percent(Radiologist$Sens_L, suffix = ""), "-", percent(Radiologist$Sens_H), ")")
Radiologist$Specificity <- paste0(percent(Radiologist$Spec), ", (", percent(Radiologist$Spec_L, suffix = ""), "-", percent(Radiologist$Spec_H), ")")
Radiologist
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
source("DataWrangling/GlobalOption.R")
source("radiologist.R")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
MDF <- read.csv(file = "C:/Users/zhizh/OneDrive - Stop TB Partnership/UNOPS/10 Paper Writing/CAR software/03 Nepal_Cameroon/CAR -- 03 Nepal_Cameroon/Nepal_Cameroon.csv")
Radiologist <- Radiologist[Radiologist$Referral %in% "MDF", ]
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
roc_CAD6 <- ci.auc(Xpert2Outcome_num ~ CAD4TB6, MDF)
roc_qure <- ci.auc(Xpert2Outcome_num ~ qXRv3_100, MDF)
roc_Lunit <- ci.auc(Xpert2Outcome_num ~ LunitScore_100, MDF)
roc_JF1 <- ci.auc(Xpert2Outcome_num ~ JF1_100, MDF)
roc_JF2 <- ci.auc(Xpert2Outcome_num ~ JF2_100, MDF)
roc_IF1 <- ci.auc(Xpert2Outcome_num ~ IF1_100, MDF)
roc_IF2 <- ci.auc(Xpert2Outcome_num ~ IF2_100, MDF)
roc_IF3 <- ci.auc(Xpert2Outcome_num ~ IF3_100, MDF)
# library(pROC)
# roc1 <- roc(Xpert2Outcome_num ~ CAD4TB6, MDF)
# roc2 <- roc(Xpert2Outcome_num ~ qXRv3_100, MDF)
# cov(roc1, roc2, method="obuchowski")
# cov(roc1, roc2, method="delong")
# base <- ggplot(CAD_Xpert_plot, aes(X, Sens, color = DeepLearningSystem)) + geom_path()+ geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H), fill = "red", alpha= 0.2)
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) +
geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ggROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal()+ annotate("text", x = .75, y = .15, label = paste("Lunit INSIGHT CXR: ", round(roc_Lunit[2],2), " (95% CI:", round(roc_Lunit[1],2), "-", round(roc_Lunit[3],2), ")", "\n", "qXR: ", round(roc_qure[2],2), " (95% CI:", round(roc_qure[1],2), "-", round(roc_qure[3],2), ")", "\n", "InferReadDR: ", round(roc_IF2[2],2), " (95% CI:", round(roc_IF2[1],2), "-", round(roc_IF2[3],2), ")", "\n", "JF CXR-1: ", round(roc_JF1[2],2), " (95% CI:", round(roc_JF1[1],2), "-", round(roc_JF1[3],2), ")", "\n",  "CAD4TB: ", round(roc_CAD6[2],2), " (95% CI:", round(roc_CAD6[1],2), "-", round(roc_CAD6[3],2), ")", sep = ""), size = 3) +
labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("Figure X: The ROC curves of  CAD4TB(v6), Infervision(v2), JF CXR-1, Lunit(4.9.0) and qXR(v2) using Xpert results as the reference (n=", length(MDF$PID_OMRS), ")"))
ggROC <- ggROC + geom_point(data = Radiologist, mapping = aes(X, Sens, shape = AccuracyTableCategory)) + geom_hline(yintercept = c(0.9, 0.95), linetype="dotted", color = "blue", size=1)
tiff("Results/Figure-2 ROCs.tif", width = 10, height = 7.9, units = "in", res = 100)
ggROC
dev.off()
ggROC1 <- ggROC + coord_cartesian(xlim = c(0.25, 0.5), ylim = c(0.90, 1) ) +
ggtitle("ROC")+theme_light()
tiff("Results/ROC Zoomed-in", width = 8, height = 3.2, units = "in", res = 100)
ggROC1
dev.off()
AUC <- paste("Lunit INSIGHT CXR: ", round(roc_Lunit[2],4), " (95% CI:", round(roc_Lunit[1],4), "-", round(roc_Lunit[3],4), ")", ", ",
"qXR: ", round(roc_qure[2],4), " (95% CI:", round(roc_qure[1],4), "-", round(roc_qure[3],4), ")", ", ",
"InferReadDR: ", round(roc_IF2[2],4), " (95% CI:", round(roc_IF2[1],4), "-", round(roc_IF2[3],4), ")", ", ",
"JF CXR-1: ", round(roc_JF1[2],4), " (95% CI:", round(roc_JF1[1],4), "-", round(roc_JF1[3],4), ")", ", ",
"CAD4TB: ", round(roc_CAD6[2],4), " (95% CI:", round(roc_CAD6[1],4), "-", round(roc_CAD6[3],4), ")",sep = "")
rm(roc_CAD6, roc_JF1, roc_JF2, roc_qure, roc_Lunit, roc_IF1, roc_IF2, roc_IF3, dat)
AUC
AUC
source("radiologist.R")
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert Cutoffs TABLE.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# MDF <- read.csv(file = "C:/Users/zhizh/OneDrive - Stop TB Partnership/UNOPS/10 Paper Writing/CAR software/03 Nepal_Cameroon/CAR -- 03 Nepal_Cameroon/Nepal_Cameroon.csv")
Radiologist <- Radiologist[Radiologist$Referral %in% "MDF", ]
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
roc_CAD6 <- ci.auc(Xpert2Outcome_num ~ CAD4TB6, MDF)
roc_qure <- ci.auc(Xpert2Outcome_num ~ qXRv3_100, MDF)
roc_Lunit <- ci.auc(Xpert2Outcome_num ~ LunitScore_100, MDF)
roc_JF1 <- ci.auc(Xpert2Outcome_num ~ JF1_100, MDF)
roc_JF2 <- ci.auc(Xpert2Outcome_num ~ JF2_100, MDF)
roc_IF1 <- ci.auc(Xpert2Outcome_num ~ IF1_100, MDF)
roc_IF2 <- ci.auc(Xpert2Outcome_num ~ IF2_100, MDF)
roc_IF3 <- ci.auc(Xpert2Outcome_num ~ IF3_100, MDF)
# library(pROC)
# roc1 <- roc(Xpert2Outcome_num ~ CAD4TB6, MDF)
# roc2 <- roc(Xpert2Outcome_num ~ qXRv3_100, MDF)
# cov(roc1, roc2, method="obuchowski")
# cov(roc1, roc2, method="delong")
# base <- ggplot(CAD_Xpert_plot, aes(X, Sens, color = DeepLearningSystem)) + geom_path()+ geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H), fill = "red", alpha= 0.2)
base <- ggplot(CAD_Xpert_plot, aes(X, Sens)) + geom_path(aes(color = DeepLearningSystem)) +
geom_ribbon(aes(x = X, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
ggROC <- base + theme_light() + geom_abline(slope=1, intercept = 0, linetype = "dashed", alpha=0.7, color = "grey") + coord_equal()+ annotate("text", x = .75, y = .15, label = paste("Lunit INSIGHT CXR: ", round(roc_Lunit[2],2), " (95% CI:", round(roc_Lunit[1],2), "-", round(roc_Lunit[3],2), ")", "\n", "qXR: ", round(roc_qure[2],2), " (95% CI:", round(roc_qure[1],2), "-", round(roc_qure[3],2), ")", "\n", "InferReadDR: ", round(roc_IF2[2],2), " (95% CI:", round(roc_IF2[1],2), "-", round(roc_IF2[3],2), ")", "\n", "JF CXR-1: ", round(roc_JF1[2],2), " (95% CI:", round(roc_JF1[1],2), "-", round(roc_JF1[3],2), ")", "\n",  "CAD4TB: ", round(roc_CAD6[2],2), " (95% CI:", round(roc_CAD6[1],2), "-", round(roc_CAD6[3],2), ")", sep = ""), size = 3) +
labs(x = "1-Specificity", y= "Sensitivity", subtitle = paste0("Figure X: The ROC curves of  CAD4TB(v6), Infervision(v2), JF CXR-1, Lunit(4.9.0) and qXR(v2) using Xpert results as the reference (n=", length(MDF$PID_OMRS), ")"))
ggROC <- ggROC + geom_point(data = Radiologist, mapping = aes(X, Sens, shape = AccuracyTableCategory)) + geom_hline(yintercept = c(0.9, 0.95), linetype="dotted", color = "blue", size=1)
tiff("Results/Figure-2 ROCs.tif", width = 10, height = 7.9, units = "in", res = 100)
ggROC
dev.off()
ggROC1 <- ggROC + coord_cartesian(xlim = c(0.25, 0.5), ylim = c(0.90, 1) ) +
ggtitle("ROC")+theme_light()
tiff("Results/ROC Zoomed-in", width = 8, height = 3.2, units = "in", res = 100)
ggROC1
dev.off()
AUC <- paste("Lunit INSIGHT CXR: ", round(roc_Lunit[2],4), " (95% CI:", round(roc_Lunit[1],4), "-", round(roc_Lunit[3],4), ")", ", ",
"qXR: ", round(roc_qure[2],4), " (95% CI:", round(roc_qure[1],4), "-", round(roc_qure[3],4), ")", ", ",
"InferReadDR: ", round(roc_IF2[2],4), " (95% CI:", round(roc_IF2[1],4), "-", round(roc_IF2[3],4), ")", ", ",
"JF CXR-1: ", round(roc_JF1[2],4), " (95% CI:", round(roc_JF1[1],4), "-", round(roc_JF1[3],4), ")", ", ",
"CAD4TB: ", round(roc_CAD6[2],4), " (95% CI:", round(roc_CAD6[1],4), "-", round(roc_CAD6[3],4), ")",sep = "")
rm(roc_CAD6, roc_JF1, roc_JF2, roc_qure, roc_Lunit, roc_IF1, roc_IF2, roc_IF3, dat)
AUC
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
MDF <- read.csv("DataWrangling/MDF.csv")
# MDF <- read.csv("DataWrangling/MDF.6.3.csv")
MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv3_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
# ML <- MDF[, c('PID_OMRS', 'Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv3', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_training <- ML[sample(nrow(ML), 18853), ]
# ML_testing <- subset(ML, !(ML$PID_OMRS %in% ML_training$PID_OMRS))
# write.csv(ML, "DataWrangling/ML.csv", row.names = F)
# write.csv(ML_training, "DataWrangling/ML_training.csv", row.names = F)
# write.csv(ML_testing, "DataWrangling/ML_testing.csv", row.names = F)
CAD_Xpert_plot <- CAD_Xpert_plot[!CAD_Xpert_plot$DeepLearningSystem %in% c("IF1", "JF2", "IF3"), ]
roc_CAD6 <- ci.auc(Xpert2Outcome_num ~ CAD4TB6, MDF)
roc_qure <- ci.auc(Xpert2Outcome_num ~ qXRv3_100, MDF)
roc_Lunit <- ci.auc(Xpert2Outcome_num ~ LunitScore_100, MDF)
roc_JF1 <- ci.auc(Xpert2Outcome_num ~ JF1_100, MDF)
roc_JF2 <- ci.auc(Xpert2Outcome_num ~ JF2_100, MDF)
roc_IF1 <- ci.auc(Xpert2Outcome_num ~ IF1_100, MDF)
roc_IF2 <- ci.auc(Xpert2Outcome_num ~ IF2_100, MDF)
roc_IF3 <- ci.auc(Xpert2Outcome_num ~ IF3_100, MDF)
AUC <- paste("Lunit INSIGHT CXR: ", round(roc_Lunit[2],4), " (95% CI:", round(roc_Lunit[1],4), "-", round(roc_Lunit[3],4), ")", ", ",
"qXR: ", round(roc_qure[2],4), " (95% CI:", round(roc_qure[1],4), "-", round(roc_qure[3],4), ")", ", ",
"InferReadDR: ", round(roc_IF2[2],4), " (95% CI:", round(roc_IF2[1],4), "-", round(roc_IF2[3],4), ")", ", ",
"JF CXR-1: ", round(roc_JF1[2],4), " (95% CI:", round(roc_JF1[1],4), "-", round(roc_JF1[3],4), ")", ", ",
"CAD4TB: ", round(roc_CAD6[2],4), " (95% CI:", round(roc_CAD6[1],4), "-", round(roc_CAD6[3],4), ")",sep = "")
roc_qure <- ci.auc(Xpert2Outcome_num ~ qXRv3_100, MDF)
