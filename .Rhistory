# CAD4TB version 6 and verson 6.3 are both included in this script. no need to rerun the cleaning.r, just load different dataset
# line 30-31
####========================================================
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- read.csv("DataWrangling/MDF.6.3.csv")
# RM <- MDF[(is.na(MDF$UseCase)==T) & MDF$GXP.Result %in% "MTB Not Detected" & MDF$Radiology.Result %in% "X-Ray Normal", ]
# RM <- RM[1:48, ]
# MDF <- MDF[!MDF$PID_OMRS %in% RM$PID_OMRS, ]
table(MDF$UseCase)
table(MDF$GXP.Result)
#
# MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
summary(MDF$Radiology.Result) # removing 16 images that were marked  unclear
MDF <- MDF[MDF$Radiology.Result != "", ]
MDF <- MDF[MDF$Radiology.Result != "Image Unclear", ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv3_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
# ML <- MDF[, c('PID_OMRS', 'Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv3', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_training <- ML[sample(nrow(ML), 18853), ]
# ML_testing <- subset(ML, !(ML$PID_OMRS %in% ML_training$PID_OMRS))
# write.csv(ML, "DataWrangling/ML.csv", row.names = F)
# write.csv(ML_training, "DataWrangling/ML_training.csv", row.names = F)
# write.csv(ML_testing, "DataWrangling/ML_testing.csv", row.names = F)
rm(MDF_long)
View(MDF)
MDF$qXRv3 <- MDF$qXRv3*100
MDF$LunitScore <- MDF$LunitScore*100
MDF$IF2 <- MDF$IF2*100
MDF$JF1 <- MDF$JF1*100
library(tableone)
# MDF <- MDF[MDF$Xpert2Outcome_num %in% "1", ]
# Define numeric variables
listVar <- c("Age", "AgeGroup", "Gender", "Cough", "Fever", "Active.Breathing.Shortness", "Weight.Loss","Haemoptysis", "Symptoms", "TB.Medication.History", "Xpert2Outcome_num", "MTB.Burden", "RIF.Result", "UseCase", "Radiology.Result", "CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2")
#Define categorical variables
catVars <- c( "AgeGroup", "Gender", "Cough", "Fever", "Active.Breathing.Shortness", "Weight.Loss","Haemoptysis", "Symptoms", "TB.Medication.History", "Xpert2Outcome_num", "MTB.Burden", "RIF.Result", "UseCase", "Radiology.Result")
table1 <- CreateTableOne(vars = listVar, strata=c("Xpert2Outcome_num"), data = MDF, factorVars = catVars)
View(table1)
table1
#### p-value ---------
summary(table1$CatTable)
summary(tableType$ContTable)
summary(table1$ContTable)
tablethistory <- CreateTableOne(vars = listVar, strata=c("TB.Medication.History"), data = MDF, factorVars = catVars)
summary(tablethistory$CatTable)
summary(tablethistory$ContTable)
source("DataWrangling/GlobalOption.R")
summary(MDF$IF2)
summary(MDF$IF1)
source("DataWrangling/GlobalOption.R")
# Define numeric variables
listVar <- c("Age", "AgeGroup", "Gender", "Cough", "Fever", "Active.Breathing.Shortness", "Weight.Loss","Haemoptysis", "Symptoms", "TB.Medication.History", "Xpert2Outcome_num", "MTB.Burden", "RIF.Result", "UseCase", "Radiology.Result", "CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2")
#Define categorical variables
catVars <- c( "AgeGroup", "Gender", "Cough", "Fever", "Active.Breathing.Shortness", "Weight.Loss","Haemoptysis", "Symptoms", "TB.Medication.History", "Xpert2Outcome_num", "MTB.Burden", "RIF.Result", "UseCase", "Radiology.Result")
table1 <- CreateTableOne(vars = listVar, strata=c("Xpert2Outcome_num"), data = MDF, factorVars = catVars)
tableType <- CreateTableOne(vars = listVar, strata=c("Radiology.Result"), data = MDF, factorVars = catVars)
table1.all <- CreateTableOne(vars = listVar, data = MDF, factorVars = catVars)
tablethistory <- CreateTableOne(vars = listVar, strata=c("TB.Medication.History"), data = MDF, factorVars = catVars)
#### p-value ---------
summary(table1$CatTable)
summary(tableType$CatTable)
summary(tableType$ContTable)
source("DataWrangling/GlobalOption.R")
# MDF$qXRv3 <- MDF$qXRv3*100
# MDF$LunitScore <- MDF$LunitScore*100
# MDF$IF1 <- MDF$IF*100
# MDF$JF1 <- MDF$JF1*100
library(tableone)
# MDF <- MDF[MDF$Xpert2Outcome_num %in% "1", ]
# Define numeric variables
listVar <- c("Age", "AgeGroup", "Gender", "Cough", "Fever", "Active.Breathing.Shortness", "Weight.Loss","Haemoptysis", "Symptoms", "TB.Medication.History", "Xpert2Outcome_num", "MTB.Burden", "RIF.Result", "UseCase", "Radiology.Result", "CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2")
#Define categorical variables
catVars <- c( "AgeGroup", "Gender", "Cough", "Fever", "Active.Breathing.Shortness", "Weight.Loss","Haemoptysis", "Symptoms", "TB.Medication.History", "Xpert2Outcome_num", "MTB.Burden", "RIF.Result", "UseCase", "Radiology.Result")
table1 <- CreateTableOne(vars = listVar, strata=c("Xpert2Outcome_num"), data = MDF, factorVars = catVars)
tableType <- CreateTableOne(vars = listVar, strata=c("Radiology.Result"), data = MDF, factorVars = catVars)
table1.all <- CreateTableOne(vars = listVar, data = MDF, factorVars = catVars)
tablethistory <- CreateTableOne(vars = listVar, strata=c("TB.Medication.History"), data = MDF, factorVars = catVars)
#
#
# #### p-value ---------
table1 <- print(table1, nonnormal = c("Age", "CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2"), cramVars = "Gender", catDigits = 1, contDigits = 1, noSpaces = TRUE)
tabletype <- print(tableType, nonnormal = c("Age", "CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2"), cramVars = "Gender", catDigits = 1, contDigits = 1, noSpaces = TRUE)
table1all <- print(table1.all, nonnormal = c("Age","CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2"), cramVars = "Gender", catDigits = 1, contDigits = 1, noSpaces = TRUE)
tablethistory <- print(tablethistory, nonnormal = c("Age","CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2"), cramVars = "Gender", catDigits = 1, contDigits = 1, noSpaces = TRUE)
table1DF <- data.frame(columnNameILike = row.names(table1), table1)
table1allDF <- data.frame(columnNameILike = row.names(table1all), table1all)
tablethistory <- data.frame(columnNameILike = row.names(tablethistory), tablethistory)
tabletypeDF <- data.frame(columnNameILike = row.names(tabletype), tabletype)
T1 <- cbind(table1allDF, table1DF, tablethistory, tabletypeDF)
T1 <- T1[, c(1, 2, 5,4,6,10,9,11,14,16,15,17,18)]
# T1 <- T1[, c(1, 2, 5,4,6,9,7,10)]
colnames(T1) <- c("", "Overall", "Xpert Positive", "Xpert Negative", "p test", "TB History", "New Case", "p test", "Abnormal - Highly suggestive of TB", "Abnormal - Possibly TB", "Abnormal - not TB", "Normal", "p test")
# TEMP <- scan(text = "n,Age (median [IQR]),Gender = F/M (%),Cough = Yes (%),Fever = Yes (%),Short of breath = Yes (%),Weight Loss = Yes (%),Haemoptysis = Yes (%),Any symptom(s) = Yes (%),TB History = Yes (%),Xpert positive (%),MTB Burden (%), High,   Low,   Medium,   Very Low,RIF Result (%), Detected,   Indeterminate,   Not Detected, Use Case (%),   Private&Public Referral,   Public DOTS Retesting,   Walk-in, Radiologist = Highly suggestive of TB (%),Radiologist = Possibly TB (%),Radiologist = Any abnormality (%),CAD4TB (median [IQR]),qXR (median [IQR]),Lunit INSIGHT CXR (median [IQR]),JF CXR-1 (median [IQR]), IF1 (median [IQR]), InferReadDR (median [IQR])", sep = ",", what = "")
#
# T1$N <- TEMP
# T1 <- T1[, c(10, 2,3, 5:8)]
# rm(TEMP)
write.csv(T1, "Results/Table 1.csv", row.names = FALSE)
rm(list = ls())
source("DataWrangling/GlobalOption.R")
library(precrec)
library(ggplot2)
ROCPRC <- function(dataset){
attr <- attributes(evalmod(scores = dataset$CAD4TB6, labels = dataset$Xpert2Outcome_num))
aucT1 <- c("CAD4TB ", round(attr$auc[4],4))
attr <- attributes(evalmod(scores = dataset$qXRv3, labels = dataset$Xpert2Outcome_num))
aucT2 <- c("qXR ", round(attr$auc[4],4))
attr <- attributes(evalmod(scores = dataset$LunitScore, labels = dataset$Xpert2Outcome_num))
aucT3 <- c("Lunit INSIGHT CXR", round(attr$auc[4],4))
attr <- attributes(evalmod(scores = dataset$JF1, labels = dataset$Xpert2Outcome_num))
aucT4 <- c("JF CXR-1", round(attr$auc[4],4))
attr <- attributes(evalmod(scores = dataset$IF2, labels = dataset$Xpert2Outcome_num))
aucT5 <- c("InferReadDR ", round(attr$auc[4],4))
# return(mmcurves)
# return(autoplot(mmcurves))
aucT <- c(aucT1, aucT2, aucT3, aucT4, aucT5)
return(aucT)
}
l <- ROCPRC(MDF)
all <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
all$subgroup <- "all"
View(all)
all$X3*100
all$X3 <- all$X3*100
all
# MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- read.csv("DataWrangling/MDF.6.3.csv")
# RM <- MDF[(is.na(MDF$UseCase)==T) & MDF$GXP.Result %in% "MTB Not Detected" & MDF$Radiology.Result %in% "X-Ray Normal", ]
# RM <- RM[1:48, ]
# MDF <- MDF[!MDF$PID_OMRS %in% RM$PID_OMRS, ]
table(MDF$UseCase)
table(MDF$GXP.Result)
#
# MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
summary(MDF$Radiology.Result) # removing 16 images that were marked  unclear
MDF <- MDF[MDF$Radiology.Result != "", ]
MDF <- MDF[MDF$Radiology.Result != "Image Unclear", ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv3_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv3_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
Sys.setenv(LANG = "en")
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC) # contain function roc
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library(readxl)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Master_df <- read.csv(file = "DataWrangling/BGD.csv", header=T)
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- quarter(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
Master_df <- Master_df %>%
filter(Result.Date < as.Date("2017-01-01"))
SymptomData <- read_excel("DataWrangling/ScreeningData.xlsx")
Master_df <- merge(Master_df, SymptomData, by.x = "PID_OMRS", by.y = "OpenMRS Identification Number", all.x = TRUE)
# Delft 6.0.0
CAD6_delft <- read.table(file = "DataWrangling/CAD_delft_2018.csv", sep = ",", header = T, fill = T)
colnames(CAD6_delft)[7] <- "TID_Delft"
CAD6_delft <- CAD6_delft[, -2]
CAD6_delft <- CAD6_delft[, c(1, 2, 6, 9, 10)]
#
QA2.BGD <- read.csv(file = "./AI Scores/qXRv2.csv", header=T, sep=",")
QA3.BGD <- read.csv(file = "./AI Scores/qXRv3.csv", header=T, sep=",")
#### Radiologist TB, not TB ####
# Highly TB Suggestive
Master_df$rad.highly.TB <- "0"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "Highly TB Suggestive" ] <- "1"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear" ] <- "NA"
# Highly+ possibly
Master_df$rad.TB <- "0"
Master_df$rad.TB [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" ] <- "1"
Master_df$rad.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
# Any abnormality
Master_df$rad.abn <- "0"
Master_df$rad.abn [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" | Master_df$Radiology.Result == "Non-TB Abnormality"] <- "1"
Master_df$rad.abn [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
###  Clean MasterDF
n_occur <- data.frame(table(Master_df$PID_OMRS))
Master_df <- (Master_df[Master_df$PID_OMRS %in% n_occur$Var1[n_occur$Freq < 2], ]) # execute to remove the duplicated PID
n_occur <- data.frame(table(Master_df$TID_OMRS))
MasterDF1TID <- (Master_df[Master_df$TID_OMRS %in% n_occur$Var1[n_occur$Freq == 1], ]) # MasterDF1TID is a subset withOUT duplicated TID
#### Radiologist TB, not TB ####
# Highly TB Suggestive
Master_df$rad.highly.TB <- "0"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "Highly TB Suggestive" ] <- "1"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear" ] <- "NA"
# Highly+ possibly
Master_df$rad.TB <- "0"
Master_df$rad.TB [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" ] <- "1"
Master_df$rad.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
# Any abnormality
Master_df$rad.abn <- "0"
Master_df$rad.abn [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" | Master_df$Radiology.Result == "Non-TB Abnormality"] <- "1"
Master_df$rad.abn [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
###  Clean MasterDF
n_occur <- data.frame(table(Master_df$PID_OMRS))
Master_df <- (Master_df[Master_df$PID_OMRS %in% n_occur$Var1[n_occur$Freq < 2], ]) # execute to remove the duplicated PID
n_occur <- data.frame(table(Master_df$TID_OMRS))
MasterDF1TID <- (Master_df[Master_df$TID_OMRS %in% n_occur$Var1[n_occur$Freq == 1], ]) # MasterDF1TID is a subset withOUT duplicated TID
###  Clean Delft
# CAD6_delft <- CAD6_delft[grep("^.{12}$",CAD6_delft$TID_Delft), ]  #TID_Delft is
DeDuDelft_CAD6 <- CAD6_delft[!duplicated(CAD6_delft[c("TID_Delft",  "CAD4TB6")]), ]
n_occur <- data.frame(table(DeDuDelft_CAD6$TID_Delft))
# But I decided to discard all records with the same TID with different CAD6 (due to inability to trace the true identify of them). 1857 are removed
DelftClean <- DeDuDelft_CAD6[DeDuDelft_CAD6$TID_Delft %in% n_occur$Var1[n_occur$Freq == 1], ] # A df with just unique TID from Delft that don't have different CAD6 score --> 26051
rm(DeDuDelft_CAD6)
###  Merge
MDF_Delft <- merge(MasterDF1TID, CAD6_delft, by.x = "TID_OMRS", by.y = "TID_Delft")
# MDF_qxr <- merge(MasterDF1TID, QA.BGD, by.x = "TID_OMRS", by.y = "TID")
View(QA2.BGD)
View(QA3.BGD)
# MDF_qxr <- merge(MasterDF1TID, QA.BGD, by.x = "TID_OMRS", by.y = "TID")
MDF_Delft_qxr2 <- merge(MDF_Delft, QA2.BGD, by.x = "TID_OMRS", by.y = "TID")
MDF_Delft_qxr3 <- merge(MDF_Delft_qxr2, QA3.BGD, by.x = "TID_OMRS", by.y = "TID")
Sys.setenv(LANG = "en")
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC) # contain function roc
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library(readxl)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Master_df <- read.csv(file = "DataWrangling/BGD.csv", header=T)
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- quarter(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
Master_df <- Master_df %>%
filter(Result.Date < as.Date("2017-01-01"))
SymptomData <- read_excel("DataWrangling/ScreeningData.xlsx")
Master_df <- merge(Master_df, SymptomData, by.x = "PID_OMRS", by.y = "OpenMRS Identification Number", all.x = TRUE)
#### Radiologist TB, not TB ####
# Highly TB Suggestive
Master_df$rad.highly.TB <- "0"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "Highly TB Suggestive" ] <- "1"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear" ] <- "NA"
# Highly+ possibly
Master_df$rad.TB <- "0"
Master_df$rad.TB [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" ] <- "1"
Master_df$rad.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
# Any abnormality
Master_df$rad.abn <- "0"
Master_df$rad.abn [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" | Master_df$Radiology.Result == "Non-TB Abnormality"] <- "1"
Master_df$rad.abn [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
CAD6_delft <- read.table(file = "DataWrangling/CAD_delft_2018.csv", sep = ",", header = T, fill = T)
colnames(CAD6_delft)[7] <- "TID_Delft"
CAD6_delft <- CAD6_delft[, -2]
CAD6_delft <- CAD6_delft[, c(1, 2, 6, 9, 10)]
View(CAD6_delft)
#
# Delft CAD4TB7
CAD7_delft <- read.table(file = "DataWrangling/Delft 6.3.0.csv", sep = ",", header = T, fill = T)
View(CAD7_delft)
names(CAD7_delft)[1] <- "TID_Delft"
QA2.BGD <- read.csv(file = "./AI Scores/qXRv2.csv", header=T, sep=",")
QA3.BGD <- read.csv(file = "./AI Scores/qXRv3.csv", header=T, sep=",")
###  Clean MasterDF
n_occur <- data.frame(table(Master_df$PID_OMRS))
Master_df <- (Master_df[Master_df$PID_OMRS %in% n_occur$Var1[n_occur$Freq < 2], ]) # execute to remove the duplicated PID
n_occur <- data.frame(table(Master_df$TID_OMRS))
MasterDF1TID <- (Master_df[Master_df$TID_OMRS %in% n_occur$Var1[n_occur$Freq == 1], ]) # MasterDF1TID is a subset withOUT duplicated TID
rm(n_occur)
DeDuDelft_CAD6 <- CAD6_delft[!duplicated(CAD6_delft[c("TID_Delft",  "CAD4TB6")]), ]
n_occur <- data.frame(table(DeDuDelft_CAD6$TID_Delft))
# But I decided to discard all records with the same TID with different CAD6 (due to inability to trace the true identify of them). 1857 are removed
DelftClean <- DeDuDelft_CAD6[DeDuDelft_CAD6$TID_Delft %in% n_occur$Var1[n_occur$Freq == 1], ] # A df with just unique TID from Delft that don't have different CAD6 score --> 26051
rm(DeDuDelft_CAD6)
rm(DeDuDelft_CAD6)
###  Merge
MDF_Delft6 <- merge(MasterDF1TID, CAD6_delft, by.x = "TID_OMRS", by.y = "TID_Delft")
MDF_Delft67 <- merge(MDF_Delft6, CAD7_delft, by.x = "TID_OMRS", by.y = "TID_Delft")
MDF_Delft_qxr2 <- merge(MDF_Delft67, QA2.BGD, by.x = "TID_OMRS", by.y = "TID")
MDF_Delft_qxr23 <- merge(MDF_Delft_qxr2, QA3.BGD, by.x = "TID_OMRS", by.y = "TID")
### Save csv ##
MDF <- MDF_Delft_qxr23
write.csv(MDF, "DataWrangling/MDF.csv", row.names = F)
rm(ls())
rm(list = ls(all.names = TRUE))
MDF <- read.csv("DataWrangling/MDF.csv")
summary(MDF)
MDF$Symptoms <- "1"
MDF$Symptoms[MDF$Cough %in% "No" & MDF$Fever %in% "No" & MDF$`Active Breathing Shortness` %in% "No" & MDF$`Weight Loss` %in% "No" & MDF$Haemoptysis %in% "No"] <- "0"
## Subset
# MDF <- subset(MDF, MDF$Age > 15)
# MDF <- subset(MDF, is.na(MDF$Xpert2Outcome_num)==F)
MDF <- subset(MDF, is.na(MDF$CAD4TB6)==F)
Sys.setenv(LANG = "en")
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC) # contain function roc
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library(readxl)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Master_df <- read.csv(file = "DataWrangling/BGD.csv", header=T)
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- quarter(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
Master_df <- Master_df %>%
filter(Result.Date < as.Date("2017-01-01"))
SymptomData <- read_excel("DataWrangling/ScreeningData.xlsx")
Master_df <- merge(Master_df, SymptomData, by.x = "PID_OMRS", by.y = "OpenMRS Identification Number", all.x = TRUE)
#### Radiologist TB, not TB ####
# Highly TB Suggestive
Master_df$rad.highly.TB <- "0"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "Highly TB Suggestive" ] <- "1"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear" ] <- "NA"
# Highly+ possibly
Master_df$rad.TB <- "0"
Master_df$rad.TB [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" ] <- "1"
Master_df$rad.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
# Any abnormality
Master_df$rad.abn <- "0"
Master_df$rad.abn [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" | Master_df$Radiology.Result == "Non-TB Abnormality"] <- "1"
Master_df$rad.abn [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
### Add AI score ------
# Delft CAD4TB6
CAD6_delft <- read.table(file = "DataWrangling/CAD_delft_2018.csv", sep = ",", header = T, fill = T)
colnames(CAD6_delft)[7] <- "TID_Delft"
CAD6_delft <- CAD6_delft[, -2]
CAD6_delft <- CAD6_delft[, c(1, 2, 6, 9, 10)]
#
# Delft CAD4TB7
CAD7_delft <- read.table(file = "DataWrangling/Delft 6.3.0.csv", sep = ",", header = T, fill = T)
names(CAD7_delft)[1] <- "TID_Delft"
names(CAD7_delft)[2] <- "CAD4TB7"
# qXR V 2 & 3
QA2.BGD <- read.csv(file = "./AI Scores/qXRv2.csv", header=T, sep=",")
QA3.BGD <- read.csv(file = "./AI Scores/qXRv3.csv", header=T, sep=",")
###  Clean MasterDF
n_occur <- data.frame(table(Master_df$PID_OMRS))
Master_df <- (Master_df[Master_df$PID_OMRS %in% n_occur$Var1[n_occur$Freq < 2], ]) # execute to remove the duplicated PID
n_occur <- data.frame(table(Master_df$TID_OMRS))
MasterDF1TID <- (Master_df[Master_df$TID_OMRS %in% n_occur$Var1[n_occur$Freq == 1], ]) # MasterDF1TID is a subset withOUT duplicated TID
rm(n_occur)
###  Clean Delft
# CAD6_delft <- CAD6_delft[grep("^.{12}$",CAD6_delft$TID_Delft), ]  #TID_Delft is
DeDuDelft_CAD6 <- CAD6_delft[!duplicated(CAD6_delft[c("TID_Delft",  "CAD4TB6")]), ]
n_occur <- data.frame(table(DeDuDelft_CAD6$TID_Delft))
# But I decided to discard all records with the same TID with different CAD6 (due to inability to trace the true identify of them). 1857 are removed
DelftClean <- DeDuDelft_CAD6[DeDuDelft_CAD6$TID_Delft %in% n_occur$Var1[n_occur$Freq == 1], ] # A df with just unique TID from Delft that don't have different CAD6 score --> 26051
rm(DeDuDelft_CAD6)
###  Merge
MDF_Delft6 <- merge(MasterDF1TID, CAD6_delft, by.x = "TID_OMRS", by.y = "TID_Delft")
MDF_Delft67 <- merge(MDF_Delft6, CAD7_delft, by.x = "TID_OMRS", by.y = "TID_Delft")
MDF_Delft_qxr2 <- merge(MDF_Delft67, QA2.BGD, by.x = "TID_OMRS", by.y = "TID")
MDF_Delft_qxr23 <- merge(MDF_Delft_qxr2, QA3.BGD, by.x = "TID_OMRS", by.y = "TID")
rm(MDF_Delft)
### Save csv ##
MDF <- MDF_Delft_qxr23
write.csv(MDF, "DataWrangling/MDF.csv", row.names = F)
rm(list = ls(all.names = TRUE))
MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- subset(MDF, is.na(MDF$CAD4TB6)==F)
MDF <- subset(MDF, is.na(MDF$CAD4TB7)==F)
MDF <- subset(MDF, is.na(MDF$qXRv2)==F)
MDF <- subset(MDF, is.na(MDF$qXRv3)==F)
MDF <- MDF[MDF$CAD4TB6 !="-1",]
MDF <- MDF[MDF$CAD4TB7 !="-1",]
MDF <- MDF[, -c(3,4)]
MDF$AgeGroup [MDF$Age<25]<- "[15,25)"
MDF$AgeGroup [MDF$Age>=25 & MDF$Age<60]<- "[25,60)"
MDF$AgeGroup [MDF$Age>=60]<- "[60,108]"
MDF <- subset(MDF, is.na(MDF$CAD4TB6)==F)
MDF <- subset(MDF, is.na(MDF$CAD4TB7)==F)
MDF <- subset(MDF, is.na(MDF$qXRv2)==F)
MDF <- subset(MDF, is.na(MDF$qXRv3)==F)
MDF <- MDF[MDF$CAD4TB6 !="-1",]
MDF <- MDF[MDF$CAD4TB7 !="-1",]
Master_df <- read.csv("AI Scores/Master_df.csv")
MDF$Referral <- Master_df$type[match(MDF$PID_OMRS, Master_df$PID)]
MDF_Original <- MDF
#### Referral Source -----------------------
library(readxl)
Referral <- read_excel("DataWrangling/referral_source.xlsx")
Referral <- read_excel("DataWrangling/referral_source.xlsx")
Referral <- Referral[, -1]
colnames(Referral)[3] <- "ReferralSource"
Referral$ReferralSource <- tolower(Referral$ReferralSource)
MDF$ReferralSource <- Referral$ReferralSource[match(MDF$TID_OMRS, Referral$TID_OMRS)]
Classification_ZZ <- read_excel("DataWrangling/Classification_ZZ.xlsx")
Classification_ZZ$ReferralUnit <- tolower(Classification_ZZ$ReferralUnit)
MDF$UseCase <- Classification_ZZ$Unit[match(MDF$ReferralSource, Classification_ZZ$ReferralUnit)]
table(MDF$UseCase)
#### Save  -----------------------
write.csv(MDF, "2.0 Version Comparison/MDF.csv", row.names = F)
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
sum(MDF$Age >=15)
sum(MDF$Age <15)
MDF <- read.csv("2.0 Version Comparison/MDF.csv")
getwd()
MDF <- read.csv("2.0 Version Comparison/MDF.csv")
MDF <- read_csv("2.0 Version Comparison/MDF.csv")
