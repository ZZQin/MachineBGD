grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("qXRv2", "qXRv3"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = "none") + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1)
# +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
# CAD4TB ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("CAD4TBv6", "CAD4TBv7"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveCAD4TB <- base + theme_light()  + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveCAD4TB <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1) +theme(legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("qXRv2", "qXRv3"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
# CAD4TB ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("CAD4TBv6", "CAD4TBv7"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveCAD4TB <- base + theme_light()  + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveCAD4TB <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1) +theme(legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
rm(list = ls())
source("2.0 Version Comparison/Global.R")
rm(list = ls())
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
source("2.0 Version Comparison/Global.R")
New <- MDF[MDF$TB.Medication.History %in% "No",]
Old <- MDF[MDF$TB.Medication.History %in% "Yes",]
Female <- MDF[MDF$Gender %in% "F", ]
Male <- MDF[MDF$Gender %in% "M", ]
Young <- MDF[MDF$AgeGroup %in% "[15,25)",]
Middle <- MDF[MDF$AgeGroup %in% "[25,60)",]
Senior <- MDF[MDF$AgeGroup %in% "[60,108]",]
PrivateReferral <-subset(MDF, MDF$UseCase %in% "PrivateReferral")
PublicReferral <-subset(MDF, MDF$UseCase %in% "PublicReferral")
DOTS <-subset(MDF, MDF$UseCase %in% "PublicDOTSRetesting")
WalkIn <-subset(MDF, MDF$UseCase %in% "WalkIn")
Community <-subset(MDF, MDF$UseCase %in% "Community screening")
Contacts <-subset(MDF, MDF$UseCase %in% "Contacts")
### AUC with CI ---
library(pROC)
ROC <- function(dataset){
roc_CAD6 <- ci.auc(Xpert2Outcome_num ~ CAD4TBv6, dataset)
roc_qure2 <- ci.auc(Xpert2Outcome_num ~ qXRv2, dataset)
roc_CAD7 <- ci.auc(Xpert2Outcome_num ~ CAD4TBv7, dataset)
roc_qure3 <- ci.auc(Xpert2Outcome_num ~ qXRv3, dataset)
aucT <- as.data.frame(matrix(c(roc_CAD6[2], roc_CAD6[1], roc_CAD6[3], roc_qure2[2], roc_qure2[1], roc_qure2[3], roc_CAD7[2], roc_CAD7[1], roc_CAD7[3], roc_qure3[2], roc_qure3[1], roc_qure3[3]),  byrow=TRUE, ncol =  3))
names(aucT) <- c("AUC", "AUCL", "AUCH")
aucT$AI.Algorithm <- c("CAD4TB v6", "qXR v2", "CAD4TB v7", "qXR v3")
return(aucT)
}
## New only
New <- ROC(New)
New$subgroup <- "New cases"
## Old only
Old <- ROC(Old)
Old$subgroup <- "Previously treated cases"
## Young
Young <- ROC(Young)
Young$subgroup <- "Young age"
## Middle
Middle <- ROC(Middle)
Middle$subgroup <- "Middle age"
## Senior
Senior <- ROC(Senior)
Senior$subgroup <- "Old age"
## PrivateReferral only
PrivateReferral <- ROC(PrivateReferral)
PrivateReferral$subgroup <- "PrivateReferral"
## PublicReferral only
PublicReferral <- ROC(PublicReferral)
PublicReferral$subgroup <- "PublicReferral"
## DOTS only
DOTS <- ROC(DOTS)
DOTS$subgroup <- "DOTS retested"
## WalkIn only
WalkIn <- ROC(WalkIn)
WalkIn$subgroup <- "WalkIn"
## Community only
Community <- ROC(Community)
Community$subgroup <- "Community"
## Contacts only
Contacts <- ROC(Contacts)
Contacts$subgroup <- "Contacts"
## Female only
Female <- ROC(Female)
Female$subgroup <- "Female"
## Male only
Male <- ROC(Male)
Male$subgroup <- "Male"
ROCaucTable <- rbind(New, Old, Young, Middle, Senior, PrivateReferral, PublicReferral, DOTS, WalkIn,Community, Contacts, Female, Male)
View(ROCaucTable)
write.csv(ROCaucTable, "2.0 Version Comparison/SubgroupROC.csv", row.names = F)
### Bar chart with error bar ----
rm(list = ls())
ROCaucTable <- read.csv("Results/SubgroupROC.csv")
ROCaucTable <- read.csv("2.0 Version Comparison/SubgroupROC.csv")
ROCaucTable$AUC <- round(ROCaucTable$AUC, 3)
ROCaucTable$subgroup <- factor(ROCaucTable$subgroup, levels = c("All","Young age", "Middle age", "Old age", "PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts", "New cases", "Previously treated cases", "Female", "Male"))
age <-ggplot(ROCaucTable[ROCaucTable$subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=AUC, fill=subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge()) + geom_errorbar(aes(ymin=AUCL, ymax=AUCH), width=.2, position=position_dodge(0.7)) + geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90) + theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
age
referral<-ggplot(ROCaucTable[ROCaucTable$subgroup %in% c("PrivateReferral", "PublicReferral", "DOTS retested", "WalkIn", "Community", "Contacts"), ], aes(x=AI.Algorithm, y=AUC, fill=subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal() + geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05)) + geom_errorbar(aes(ymin=AUCL, ymax=AUCH), width=.2, position=position_dodge(0.6))
referral
history<-ggplot(ROCaucTable[ROCaucTable$subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=AUC, fill=subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+ theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05)) + geom_errorbar(aes(ymin=AUCL, ymax=AUCH), width=.2, position=position_dodge(0.6))
gender<-ggplot(ROCaucTable[ROCaucTable$subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=AUC, fill=subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + geom_text(aes(label=AUC), position=position_dodge(width=0.9), vjust=0.05, hjust = 1.5, angle=90)+ theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05)) + geom_errorbar(aes(ymin=AUCL, ymax=AUCH), width=.2, position=position_dodge(0.6))
tiff("2.0 Version Comparison/Subgroup.tif", width = 12, height = 7, units = "in", res = 250)
require(gridExtra)
grid.arrange(age, referral, history, gender, ncol=2)
dev.off()
Sys.setenv(LANG = "en")
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC) # contain function roc
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library(readxl)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Master_df <- read.csv(file = "DataWrangling/BGD.csv", header=T)
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- quarter(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
summary(Master_df$Age)
Master_df <- Master_df %>%  filter(Age < "15")
table(Master_df$Age, Master_df$Result.Year)
# table(Master_df$Age, Master_df$Result.Year)
summary(Master_df$Result.Year)
# table(Master_df$Age, Master_df$Result.Year)
summary(Master_df$GXP.Result)
# table(Master_df$Age, Master_df$Result.Year)
(Master_df$GXP.Result)[1:5]
# table(Master_df$Age, Master_df$Result.Year)
(Master_df$Result.Date)[1:5]
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- quarter(Master_df$Result.Date)
Master_df$Result.Date
Master_df$Result.Year <- quarter(Master_df$Result.Date)
Master_df$Result.Year
Master_df$Result.Year <- year(Master_df$Result.Date)
Master_df$Result.Year
table(Master_df$Age, Master_df$Result.Year)
summary(Master_df$Age)
Master_df <- read.csv(file = "DataWrangling/BGD.csv", header=T)
Master_df <- Master_df %>%  filter(Age < "15")
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- year(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
summary(Master_df$Age)
View(Master_df)
str(Master_df$Age)
Master_df <- Master_df %>%  filter(Age < 15)
View(Master_df)
table(Master_df$Age, Master_df$Result.Year)
summary(Master_df$Result.Year)
table(Master_df$Result.Year)
SymptomData <- read_excel("DataWrangling/ScreeningData.xlsx")
# Highly TB Suggestive
Master_df$rad.highly.TB <- "0"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "Highly TB Suggestive" ] <- "1"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear" ] <- "NA"
# Highly+ possibly
Master_df$rad.TB <- "0"
Master_df$rad.TB [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" ] <- "1"
Master_df$rad.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
# Any abnormality
Master_df$rad.abn <- "0"
Master_df$rad.abn [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" | Master_df$Radiology.Result == "Non-TB Abnormality"] <- "1"
Master_df$rad.abn [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
summary(Master_df$Xpert2Outcome_num)
View(Master_df)
Master_df <- merge(Master_df, SymptomData, by.x = "PID_OMRS", by.y = "OpenMRS Identification Number", all.x = TRUE)
summary(Master_df)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
MDF <- read.csv("DataWrangling/MDF.6.3.csv")
library(caTools)
set.seed(88)
split <- sample.split(MDF$Xpert2Outcome_num, SplitRatio = 0.75)
MDF_train <- subset(MDF, split == TRUE)
MDF_test <- subset(MDF, split == FALSE)
NC.reg <- MDF
model.null = glm(Xpert2Outcome_num ~ 1,
data=NC.reg,
family = binomial(link="logit")
)
model.full <- glm (Xpert2Outcome_num ~ Age + Sex + Cough + Fever + WeightLoss + NightSweat + highLunit + TBHistory,
data = NC.reg,
family = binomial(link="logit"))
names(MDF)
model.full <- glm (Xpert2Outcome_num ~ Age + Gender + Cough + Fever + WeightLoss + NightSweat + highLunit + TBHistory,
data = NC.reg,
family = binomial(link="logit"))
model.full <- glm (Xpert2Outcome_num ~ AgeGroup + Gender + Cough + Fever + Weight.Loss + Haemoptysis + Active.Breathing.Shortness + TB.Medication.History + qXRv3,
data = NC.reg,
family = binomial(link="logit"))
step(model.null,
scope = list(upper=model.full),
direction="both",
test="Chisq",
data=NC.reg)
step(model.null,
scope = list(upper=model.full),
direction="both",
test="Chisq",
data=NC.reg)
Sys.setenv(LANG = "en")
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC) # contain function roc
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library(readxl)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Master_df <- read.csv(file = "DataWrangling/BGD.csv", header=T)
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- quarter(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
Master_df <- Master_df %>%
filter(Result.Date < as.Date("2017-01-01"))
Sys.setenv(LANG = "en")
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC) # contain function roc
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library(readxl)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Master_df <- read.csv(file = "DataWrangling/BGD.csv", header=T)
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- quarter(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
Master_df$Result.Year <- year(Master_df$Result.Date)
table(Master_df$Result.Year, Master_df$Age)
Master_df <- Master_df %>% filter(Age >= 5 & Age <=15)
table(Master_df$Result.Year, Master_df$Age)
table(Master_df$Age, Master_df$Result.Year)
table(Master_df$Result.Year)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
Master_df$PID_OMRS[Master_df$Xpert2Outcome_num %in% "1"]
Master_df <- Master_df %>% filter(Age >= 5 & Age <=15)
table(Master_df$Result.Year, Xpert2Outcome_num)
Master_df <- read.csv(file = "DataWrangling/BGD.csv", header=T)
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- year(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
Master_df <- Master_df %>% filter(Age >= 5 & Age <=15)
table(Master_df$Result.Year, Xpert2Outcome_num)
table(Master_df$Result.Year, Master_df$Xpert2Outcome_num)
write.csv(Master_df, "C:/Users/zhizh/Stop TB Partnership/Digital AI Team - Documents/AI Team/1.3. Manuscripts/2.2. Children/BGD Children/00_Input_Data/Master_df.csv")
# Master_df <- Master_df %>% filter(Age >= 5 & Age <=15)
# table(Master_df$Result.Year, Master_df$Xpert2Outcome_num)
# Master_df$PID_OMRS[Master_df$Xpert2Outcome_num %in% "1"]
write.csv(Master_df, "C:/Users/zhizh/Stop TB Partnership/Digital AI Team - Documents/AI Team/1.3. Manuscripts/2.2. Children/BGD Children/00_Input_Data/Master_df.csv", row.names = FALSE)
Sys.setenv(LANG = "en")
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC) # contain function roc
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library(readxl)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Master_df <- read.csv(file = "DataWrangling/BGD.csv", header=T)
Master_df$Result.Date <- mdy(Master_df$Radiology.Result.Date)
Master_df$Result.Year <- year(Master_df$Result.Date)
Master_df$Xpert2Outcome_num <- as.character(Master_df$GXP.Result)
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Detected"] <- "1"
Master_df$Xpert2Outcome_num[Master_df$GXP.Result %in% "MTB Not Detected"] <- "0"
Master_df$Xpert2Outcome_num <- as.numeric(Master_df$Xpert2Outcome_num)
#### Radiologist TB, not TB ####
# Highly TB Suggestive
Master_df$rad.highly.TB <- "0"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "Highly TB Suggestive" ] <- "1"
Master_df$rad.highly.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear" ] <- "NA"
# Highly+ possibly
Master_df$rad.TB <- "0"
Master_df$rad.TB [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" ] <- "1"
Master_df$rad.TB [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
# Any abnormality
Master_df$rad.abn <- "0"
Master_df$rad.abn [Master_df$Radiology.Result == "Highly TB Suggestive" | Master_df$Radiology.Result =="TB Possible Signs" | Master_df$Radiology.Result == "Non-TB Abnormality"] <- "1"
Master_df$rad.abn [Master_df$Radiology.Result == "" | Master_df$Radiology.Result == "Image Unclear"] <- "NA"
names(Master_df)
SymptomData <- read_excel("DataWrangling/ScreeningData.xlsx")
Master_df <- merge(Master_df, SymptomData, by.x = "PID_OMRS", by.y = "OpenMRS Identification Number", all.x = TRUE)
names(Master_df)
Master_df <- Master_df %>% filter(Age >= 5 & Age <=15)
table(Master_df$Result.Year, Master_df$Xpert2Outcome_num)
Master_df$PID_OMRS[Master_df$Xpert2Outcome_num %in% "1"]
write.csv(Master_df, "C:/Users/zhizh/Stop TB Partnership/Digital AI Team - Documents/AI Team/1.3. Manuscripts/2.2. Children/BGD Children/00_Input_Data/Master_df.csv", row.names = FALSE)
# Model the effect
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/CAD_Xpert.csv")
names(MDF)
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
# CAD_Xpert_plot <- read.csv("2.0 Version Comparison/CAD_Xpert.csv")
# names(MDF)
# write.csv(MDF[, c(1, 13, 28)], "2.0 Version Comparison/Q2.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 29)], "2.0 Version Comparison/Q3.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 26)], "2.0 Version Comparison/D6.csv", row.names = FALSE)
# write.csv(MDF[, c(1, 13, 27)], "2.0 Version Comparison/D7.csv", row.names = FALSE)
## for example, I declare the following values
pop_size <- 54125
prev <- 0.19
XpertCost <- 20
D6_Cost <- read_csv("2.0 Version Comparison/Results/D6_Cost.csv")
D7_Cost <- read_csv("2.0 Version Comparison/Results/D7_Cost.csv")
Q2_Cost <- read_csv("2.0 Version Comparison/Results/Q2_Cost.csv")
Q3_Cost <- read_csv("2.0 Version Comparison/Results/Q3_Cost.csv")
names(D6_Cost)
D6_Cost$AI <- "CAD4TBv6"
D7_Cost$AI <- "CAD4TBv7"
Q2_Cost$AI <- "qXRv2"
Q3_Cost$AI <- "qXRv3"
Cost <- rbind(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
rm(D6_Cost, D7_Cost, Q2_Cost, Q3_Cost)
Cost <- Cost[, -c(2:4, 9:13)]
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("qXRv2", "qXRv3"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1)
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("qXRv2", "qXRv3"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
# CAD4TB ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("CAD4TBv6", "CAD4TBv7"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
source("2.0 Version Comparison/Global.R")
source("2.0 Version Comparison/radiologist.R")
# qXR ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("qXRv2", "qXRv3"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveqXR <- base + theme_light() + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("qXRv2 vs qXRv3: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveqXR <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("qXRv2 vs qXRv3: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(  legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
# CAD4TB ----
CAD_Xpert_plot <- read.csv("2.0 Version Comparison/Cutoffs TABLE.csv")
CAD_Xpert_plot <- CAD_Xpert_plot[CAD_Xpert_plot$DeepLearningSystem %in% c("CAD4TBv6", "CAD4TBv7"), ]
CAD_Xpert_plot$DeepLearningSystem <- as.character(CAD_Xpert_plot$DeepLearningSystem)
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveCAD4TB <- base + theme_light()  + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveCAD4TB <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(80, 70), linetype="dotted", color = "black", size=1) +theme(legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
### d. Sensitivity vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, Sens)) + geom_path(aes(color = DeepLearningSystem)) + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
# + geom_ribbon(aes(x = Score, ymin = Sens_L, ymax = Sens_H, color = DeepLearningSystem, fill = DeepLearningSystem), alpha= 0.2)
sensCurveCAD4TB <- base + theme_light()  + labs(x = "Abnormality Score", y= "Sensitivity", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Sensitivity vs abnormality score (n=", length(MDF$PID_OMRS), ")")) +theme(legend.position = c(5,5),legend.justification = c("left", "bottom")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1)) + geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1)
### e. Xpert Saved vs Score --------------------
base <- ggplot(CAD_Xpert_plot, aes(Score, XpertSaved.)) + geom_path(aes(color = DeepLearningSystem))  + scale_fill_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")) +  scale_color_manual(values=c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00"))
XpertSavingCurveCAD4TB <- base + theme_light()  + labs(x = "e. Abnormality Score", y= "Xpert Saved", subtitle = paste0("CAD4TBv6 vs CAD4TBv7: The Xpert Saved vs abnormality score (n=", length(MDF$PID_OMRS), ")")) + theme(panel.grid.minor = element_line(colour="grey", size=0.5)) + scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0, 100, 10))+ scale_y_continuous(minor_breaks = seq(0 , 1, 0.1), breaks = seq(0, 1, 0.1))+ geom_vline(xintercept = c(50, 60, 70), linetype="dotted", color = "black", size=1) +theme(legend.position = c(0.05,0.95),  legend.justification = c("left", "top"))
### Save --------------------
tiff("2.0 Version Comparison/2 Curves.tif", width = 10, height = 10, units = "in", res = 100)
require(gridExtra)
grid.arrange(sensCurveqXR, XpertSavingCurveqXR, sensCurveCAD4TB, XpertSavingCurveCAD4TB,  nrow=2)
dev.off()
