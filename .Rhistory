#### stratification by age AND prior TB history
aucTable <- rbind(all, New, Old, Young, Middle, Senior, Referral, DOTS, WalkIn, Female, Male)
colnames(aucTable) <- c("DL System", "AUC", "PCAUC", "Subgroup")
write.csv(aucTable, "Results/aucTable.csv")
# rm(list=(ls()))
summary(aucTable$Subgroup)
unique(aucTable$Subgroup)
aucTable <- read.csv("Results/aucTable.csv")
aucTable <- aucTable[, -1]
aucTable$Subgroup <- factor(aucTable$Subgroup, levels = c("Young age", "Middle age", "Old age", "Referred", "DOTS retested", "WalkIn", "New cases", "Previously treated cases", "Female", "Male"))
### AUC
age<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=DL.System, y=AUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
referral<-ggplot(aucTable[aucTable$Subgroup %in% c("Referred", "DOTS retested", "WalkIn"), ], aes(x=DL.System, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
history<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=DL.System, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
gender <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=DL.System, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
### PRC
agePC<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=DL.System, y=PCAUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
referralPC<-ggplot(aucTable[aucTable$Subgroup %in% c("Referred", "DOTS retested", "WalkIn"), ], aes(x=DL.System, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
historyPC<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=DL.System, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
genderPC <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=DL.System, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
tiff("Results/PRC ROC AUC plot.tif", width = 18, height = 8, units = "in", res = 100)
require(gridExtra)
grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=4)
# grid.arrange(age, referral, history, ncol=3)
dev.off()
# rm(age, referral, history, agePC, referralPC, historyPC, gender, genderPC)
tiff("Results/PRC AUC plot.tif", width = 9, height = 8, units = "in", res = 100)
grid.arrange(agePC, referralPC, historyPC, genderPC, ncol=2)
dev.off()
source('C:/Users/zhizh/OneDrive - Stop TB Partnership/UNOPS/10 Paper Writing/CAR software/02 Bangladesh/MachineBGD/CutoffTable.R', echo=TRUE)
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$qXR2, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
View(CAM)
maxV
seq(1:101)
seq(1:101)
summary(BGD$qXR2)
DL.score[2]
DL.score[1]
DL.score[10]
summary(BGD$Xpert2Outcome_num)
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$qXR2, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
CAM.DF
View(CAM.DF)
summary(BGD)
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$Lunit, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
################ Bangladesh #####################################
source(file = "DataWrangling/GlobalOption.R")
source("radiologist.R")
names(BGD)
summary(BGD$XPERT_pos)
BGD <- MDF[, -1]
names(BGD)
names(MDF)
names(BGD)[26] <- "CAD4TB6"
names(BGD)[27] <- "qXR2"
names(BGD)[28] <- "Lunit"
names(BGD)[29]<- "JF1"
names(BGD)[32] <- "Infervision"
names(BGD)[13] <- "XPERT_pos"
### qXR, Lunit, Infervision, JF1 ------------
DL.score <- seq(0, 1, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# BGD_qXR2
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$qXR2, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.qXR2 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.qXR2$Country  <- paste("BGD")
BGD.qXR2$DeepLearningSystem <- paste("qXR")
BGD.qXR2$Comment <- ""
BGD.qXR2$Comment[which(abs(BGD.qXR2$X13-0.5) == min(abs(BGD.qXR2$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.qXR2$Comment[which(abs(BGD.qXR2$X13-2/3) == min(abs(BGD.qXR2$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.qXR2$Comment[which(abs(BGD.qXR2$X13-0.75) == min(abs(BGD.qXR2$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.qXR2$Comment[which(abs(BGD.qXR2$X1-Radiologist$Sens[1]) == min(abs(BGD.qXR2$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.qXR2$Comment[which(abs(BGD.qXR2$X1-Radiologist$Sens[2]) == min(abs(BGD.qXR2$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.qXR2$Comment[which(abs(BGD.qXR2$X1-Radiologist$Sens[3]) == min(abs(BGD.qXR2$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
# BGD_Lunit
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$Lunit, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.Lunit <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.Lunit$Country  <- paste("BGD")
BGD.Lunit$DeepLearningSystem <- paste("Lunit")
BGD.Lunit$Comment <- ""
BGD.Lunit$Comment[which(abs(BGD.Lunit$X13-0.5) == min(abs(BGD.Lunit$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.Lunit$Comment[which(abs(BGD.Lunit$X13-2/3) == min(abs(BGD.Lunit$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.Lunit$Comment[which(abs(BGD.Lunit$X13-0.75) == min(abs(BGD.Lunit$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.Lunit$Comment[which(abs(BGD.Lunit$X1-Radiologist$Sens[1]) == min(abs(BGD.Lunit$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.Lunit$Comment[which(abs(BGD.Lunit$X1-Radiologist$Sens[2]) == min(abs(BGD.Lunit$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.Lunit$Comment[which(abs(BGD.Lunit$X1-Radiologist$Sens[3]) == min(abs(BGD.Lunit$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
# BGD_Infervision
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$Infervision, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.Infervision <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.Infervision$Country  <- paste("BGD")
BGD.Infervision$DeepLearningSystem <- paste("Infervision")
BGD.Infervision$Comment <- ""
BGD.Infervision$Comment[which(abs(BGD.Infervision$X13-0.5) == min(abs(BGD.Infervision$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.Infervision$Comment[which(abs(BGD.Infervision$X13-2/3) == min(abs(BGD.Infervision$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.Infervision$Comment[which(abs(BGD.Infervision$X13-0.75) == min(abs(BGD.Infervision$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.Infervision$Comment[which(abs(BGD.Infervision$X1-Radiologist$Sens[1]) == min(abs(BGD.Infervision$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.Infervision$Comment[which(abs(BGD.Infervision$X1-Radiologist$Sens[2]) == min(abs(BGD.Infervision$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.Infervision$Comment[which(abs(BGD.Infervision$X1-Radiologist$Sens[3]) == min(abs(BGD.Infervision$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
# BGD_JF1
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$JF1, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.JF1 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.JF1$Country  <- paste("BGD")
BGD.JF1$DeepLearningSystem <- paste("JF1")
BGD.JF1$Comment <- ""
BGD.JF1$Comment[which(abs(BGD.JF1$X13-0.5) == min(abs(BGD.JF1$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.JF1$Comment[which(abs(BGD.JF1$X13-2/3) == min(abs(BGD.JF1$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.JF1$Comment[which(abs(BGD.JF1$X13-0.75) == min(abs(BGD.JF1$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.JF1$Comment[which(abs(BGD.JF1$X1-Radiologist$Sens[1]) == min(abs(BGD.JF1$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.JF1$Comment[which(abs(BGD.JF1$X1-Radiologist$Sens[2]) == min(abs(BGD.JF1$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.JF1$Comment[which(abs(BGD.JF1$X1-Radiologist$Sens[3]) == min(abs(BGD.JF1$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
### CAD4TB ------------
DL.score <- seq(0, 100, by = sepdeflt)
# BGD_CAD4TB6
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$CAD4TB6, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.CAD4TB6 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.CAD4TB6$Country  <- paste("BGD")
BGD.CAD4TB6$DeepLearningSystem <- paste("CAD4TB")
BGD.CAD4TB6$Comment <- ""
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X13-0.5) == min(abs(BGD.CAD4TB6$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X13-2/3) == min(abs(BGD.CAD4TB6$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X13-0.75) == min(abs(BGD.CAD4TB6$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X1-Radiologist$Sens[1]) == min(abs(BGD.CAD4TB6$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X1-Radiologist$Sens[2]) == min(abs(BGD.CAD4TB6$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X1-Radiologist$Sens[3]) == min(abs(BGD.CAD4TB6$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
BGD.DF <- rbind(BGD.qXR2, BGD.Lunit, BGD.Infervision, BGD.JF1, BGD.CAD4TB6)
rm(BGD.qXR2, BGD.Lunit, BGD.Infervision, BGD.JF1, BGD.CAD4TB6)
######### Merge DFs ######
CAD_Xpert <- rbind(CAM.DF, NPL.DF, BGD.DF)
colnames(CAD_Xpert)[1] <- "Sens"
colnames(CAD_Xpert)[2] <- "Sens_L"
colnames(CAD_Xpert)[3] <- "Sens_H"
colnames(CAD_Xpert)[4] <- "Spec"
colnames(CAD_Xpert)[5] <- "Spec_L"
colnames(CAD_Xpert)[6] <- "Spec_H"
colnames(CAD_Xpert)[7] <- "ppv"
colnames(CAD_Xpert)[8] <- "PPV_L"
colnames(CAD_Xpert)[9] <- "PPV_H"
colnames(CAD_Xpert)[10] <- "npv"
colnames(CAD_Xpert)[11] <- "NPV_L"
colnames(CAD_Xpert)[12] <- "NPV_H"
colnames(CAD_Xpert)[13] <- "%XpertSaved"
colnames(CAD_Xpert)[14] <- "Score"
colnames(CAD_Xpert)[15] <- "accuracy"
colnames(CAD_Xpert)[16] <- "Site"
CAD_Xpert$X <- 1-CAD_Xpert$Spec
BGD.qXR2 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$qXR2, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
names(BGD)
names(BGD$XPERT_pos)
BGD <- MDF[, ]
names(MDF)
names(BGD)
summary(BGD$Xpert2Outcome_num)
names(BGD)[26] <- "CAD4TB6"
names(BGD)[27] <- "qXR2"
names(BGD)[28] <- "Lunit"
names(BGD)[29]<- "JF1"
names(BGD)[32] <- "Infervision"
names(BGD)[13] <- "XPERT_pos"
summary(BGD$XPERT_pos)
### qXR, Lunit, Infervision, JF1 ------------
DL.score <- seq(0, 1, by = sep)
mylist <- NULL
mylist <- as.list(mylist)
# BGD_qXR2
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$qXR2, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.qXR2 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.qXR2$Country  <- paste("BGD")
BGD.qXR2$DeepLearningSystem <- paste("qXR")
BGD.qXR2$Comment <- ""
BGD.qXR2$Comment[which(abs(BGD.qXR2$X13-0.5) == min(abs(BGD.qXR2$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.qXR2$Comment[which(abs(BGD.qXR2$X13-2/3) == min(abs(BGD.qXR2$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.qXR2$Comment[which(abs(BGD.qXR2$X13-0.75) == min(abs(BGD.qXR2$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.qXR2$Comment[which(abs(BGD.qXR2$X1-Radiologist$Sens[1]) == min(abs(BGD.qXR2$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.qXR2$Comment[which(abs(BGD.qXR2$X1-Radiologist$Sens[2]) == min(abs(BGD.qXR2$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.qXR2$Comment[which(abs(BGD.qXR2$X1-Radiologist$Sens[3]) == min(abs(BGD.qXR2$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
# BGD_Lunit
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$Lunit, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.Lunit <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.Lunit$Country  <- paste("BGD")
BGD.Lunit$DeepLearningSystem <- paste("Lunit")
BGD.Lunit$Comment <- ""
BGD.Lunit$Comment[which(abs(BGD.Lunit$X13-0.5) == min(abs(BGD.Lunit$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.Lunit$Comment[which(abs(BGD.Lunit$X13-2/3) == min(abs(BGD.Lunit$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.Lunit$Comment[which(abs(BGD.Lunit$X13-0.75) == min(abs(BGD.Lunit$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.Lunit$Comment[which(abs(BGD.Lunit$X1-Radiologist$Sens[1]) == min(abs(BGD.Lunit$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.Lunit$Comment[which(abs(BGD.Lunit$X1-Radiologist$Sens[2]) == min(abs(BGD.Lunit$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.Lunit$Comment[which(abs(BGD.Lunit$X1-Radiologist$Sens[3]) == min(abs(BGD.Lunit$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
# BGD_Infervision
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$Infervision, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.Infervision <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.Infervision$Country  <- paste("BGD")
BGD.Infervision$DeepLearningSystem <- paste("Infervision")
BGD.Infervision$Comment <- ""
BGD.Infervision$Comment[which(abs(BGD.Infervision$X13-0.5) == min(abs(BGD.Infervision$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.Infervision$Comment[which(abs(BGD.Infervision$X13-2/3) == min(abs(BGD.Infervision$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.Infervision$Comment[which(abs(BGD.Infervision$X13-0.75) == min(abs(BGD.Infervision$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.Infervision$Comment[which(abs(BGD.Infervision$X1-Radiologist$Sens[1]) == min(abs(BGD.Infervision$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.Infervision$Comment[which(abs(BGD.Infervision$X1-Radiologist$Sens[2]) == min(abs(BGD.Infervision$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.Infervision$Comment[which(abs(BGD.Infervision$X1-Radiologist$Sens[3]) == min(abs(BGD.Infervision$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
# BGD_JF1
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$JF1, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.JF1 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.JF1$Country  <- paste("BGD")
BGD.JF1$DeepLearningSystem <- paste("JF1")
BGD.JF1$Comment <- ""
BGD.JF1$Comment[which(abs(BGD.JF1$X13-0.5) == min(abs(BGD.JF1$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.JF1$Comment[which(abs(BGD.JF1$X13-2/3) == min(abs(BGD.JF1$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.JF1$Comment[which(abs(BGD.JF1$X13-0.75) == min(abs(BGD.JF1$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.JF1$Comment[which(abs(BGD.JF1$X1-Radiologist$Sens[1]) == min(abs(BGD.JF1$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.JF1$Comment[which(abs(BGD.JF1$X1-Radiologist$Sens[2]) == min(abs(BGD.JF1$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.JF1$Comment[which(abs(BGD.JF1$X1-Radiologist$Sens[3]) == min(abs(BGD.JF1$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
### CAD4TB ------------
DL.score <- seq(0, 100, by = sepdeflt)
# BGD_CAD4TB6
for (i in 1 : maxV){
cutoff.accuracy <- myfunction(BGD, BGD$CAD4TB6, DL.score[i])
mylist[[i]] <- list(cutoff.accuracy)
}
BGD.CAD4TB6 <- data.frame(matrix(unlist(mylist), nrow=maxV, byrow=T))
BGD.CAD4TB6$Country  <- paste("BGD")
BGD.CAD4TB6$DeepLearningSystem <- paste("CAD4TB")
BGD.CAD4TB6$Comment <- ""
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X13-0.5) == min(abs(BGD.CAD4TB6$X13-0.5)))] <- "1/2 Xpert Saved"
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X13-2/3) == min(abs(BGD.CAD4TB6$X13-2/3)))] <- "2/3 Xpert Saved"
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X13-0.75) == min(abs(BGD.CAD4TB6$X13-0.75)))] <- "3/4 Xpert Saved"
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X1-Radiologist$Sens[1]) == min(abs(BGD.CAD4TB6$X1-Radiologist$Sens[1])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[1], sep = "")
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X1-Radiologist$Sens[2]) == min(abs(BGD.CAD4TB6$X1-Radiologist$Sens[2])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[2], sep = "")
BGD.CAD4TB6$Comment[which(abs(BGD.CAD4TB6$X1-Radiologist$Sens[3]) == min(abs(BGD.CAD4TB6$X1-Radiologist$Sens[3])))] <- paste("Radiologists' specificity = ", Radiologist$Specificity[3], sep = "")
BGD.DF <- rbind(BGD.qXR2, BGD.Lunit, BGD.Infervision, BGD.JF1, BGD.CAD4TB6)
rm(BGD.qXR2, BGD.Lunit, BGD.Infervision, BGD.JF1, BGD.CAD4TB6)
######### Merge DFs ######
CAD_Xpert <- rbind(CAM.DF, NPL.DF, BGD.DF)
colnames(CAD_Xpert)[1] <- "Sens"
colnames(CAD_Xpert)[2] <- "Sens_L"
colnames(CAD_Xpert)[3] <- "Sens_H"
colnames(CAD_Xpert)[4] <- "Spec"
colnames(CAD_Xpert)[5] <- "Spec_L"
colnames(CAD_Xpert)[6] <- "Spec_H"
colnames(CAD_Xpert)[7] <- "ppv"
colnames(CAD_Xpert)[8] <- "PPV_L"
colnames(CAD_Xpert)[9] <- "PPV_H"
colnames(CAD_Xpert)[10] <- "npv"
colnames(CAD_Xpert)[11] <- "NPV_L"
colnames(CAD_Xpert)[12] <- "NPV_H"
colnames(CAD_Xpert)[13] <- "%XpertSaved"
colnames(CAD_Xpert)[14] <- "Score"
colnames(CAD_Xpert)[15] <- "accuracy"
colnames(CAD_Xpert)[16] <- "Site"
CAD_Xpert$X <- 1-CAD_Xpert$Spec
AD_Xpert$Sen_95CI <- paste(percent(CAD_Xpert[, 2], suffix = ""), "-", percent(CAD_Xpert[, 3]), sep = "")
CAD_Xpert$Spe_95CI <- paste(percent(CAD_Xpert[, 5], suffix = ""), "-", percent(CAD_Xpert[, 6]), sep = "")
CAD_Xpert$PPV_95CI <- paste(percent(CAD_Xpert[, 8], suffix = ""), "-", percent(CAD_Xpert[, 9]), sep = "")
CAD_Xpert$NPV_95CI <- paste(percent(CAD_Xpert[, 11], suffix = ""), "-", percent(CAD_Xpert[, 12]), sep = "")
CAD_Xpert$NNT <- 1/CAD_Xpert$ppv
CAD_Xpert$NNT_H <- 1/CAD_Xpert$PPV_L
CAD_Xpert$NNT_L <- 1/CAD_Xpert$PPV_H
CAD_Xpert$Sensitivity <- paste(percent(CAD_Xpert$Sens, accuracy = 0.1), " (", CAD_Xpert$Sen_95CI, ")", sep = "")
CAD_Xpert$Specificity <- paste(percent(CAD_Xpert$Spec, accuracy = 0.1), " (", CAD_Xpert$Spe_95CI, ")", sep = "")
CAD_Xpert$PPV <- paste(percent(CAD_Xpert$ppv, accuracy = 0.1), " (", CAD_Xpert$PPV_95CI, ")", sep = "")
CAD_Xpert$NPV <- paste(percent(CAD_Xpert$npv, accuracy = 0.1), " (", CAD_Xpert$NPV_95CI, ")", sep = "")
CAD_Xpert$nnt <- paste(round(CAD_Xpert$NNT, 1), " (", round(CAD_Xpert$NNT_L, 1), "-", round(CAD_Xpert$NNT_H, 1), ")", sep = "")
CAD_Xpert$`%XpertSaved` <- round(CAD_Xpert$`%XpertSaved`, 8)
CAD_Xpert$accuracy <- round(CAD_Xpert$accuracy, 3)
CAD_Xpert$DeepLearningSystem <- as.character(CAD_Xpert$DeepLearningSystem)
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "Infervision"] <- "InferReadDR"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "Lunit"] <- "Lunit INSIGHT CXR"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "CAD4TB"] <- "CAD4TB"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "qXR"] <- "qXR"
CAD_Xpert$DeepLearningSystem[CAD_Xpert$DeepLearningSystem %in% "JF1"] <- "JF CXR-1"
CAD_Xpert$Score[CAD_Xpert$DeepLearningSystem %in% "CAD4TB"] <- CAD_Xpert$Score[CAD_Xpert$DeepLearningSystem %in% "CAD4TB"]/100
tapply(CAD_Xpert$Score, CAD_Xpert$DeepLearningSystem, summary)
SuppTable <- CAD_Xpert[, c(16, 17, 14, 24:27, 31, 13, 15, 18)]
# write.csv(CAD_Xpert, "Results/CAD_Xpert_Precise.csv", row.names = F)
# write.csv(CAD_Xpert_plot, "Results/CAD_Xpert Cutoffs TABLE.csv", row.names = F)
write.csv(SuppTable, "Results/Supp Tab.csv", row.names = F)
names(CAD_Xpert)
names(CAD_Xpert)
SuppTable <- CAD_Xpert[, c(16, 17, 14, 24:27, 13, 15, 18)]
View(SuppTable)
SuppTable <- CAD_Xpert[, c(16, 17, 14, 26:29, 30, 13, 15)]
View(SuppTable)
head(CAD_Xpert$Sen_95CI)
View(CAD_Xpert)
CAD_Xpert$Sen_95CI <- paste(percent(CAD_Xpert[, 2], suffix = ""), "-", percent(CAD_Xpert[, 3]), sep = "")
head(CAD_Xpert$Sen_95CI)
SuppTable <- CAD_Xpert[, c(16, 17, 14, 26:29, 30, 13, 15)]
View(SuppTable)
CAD_Xpert$Sensitivity <- paste(percent(CAD_Xpert$Sens, accuracy = 0.1), " (", CAD_Xpert$Sen_95CI, ")", sep = "")
summary(CAD_Xpert$Sensitivity)
head(CAD_Xpert$Sensitivity)
SuppTable <- CAD_Xpert[, c(16, 17, 14, 26:29, 30, 13, 15)]
View(SuppTable)
# write.csv(CAD_Xpert, "Results/CAD_Xpert_Precise.csv", row.names = F)
# write.csv(CAD_Xpert_plot, "Results/CAD_Xpert Cutoffs TABLE.csv", row.names = F)
write.csv(SuppTable, "Results/Supp Tab.csv", row.names = F)
source('C:/Users/zhizh/OneDrive - Stop TB Partnership/UNOPS/10 Paper Writing/CAR software/02 Bangladesh/MachineBGD/DataWrangling/GlobalOption.R', echo=TRUE)
ML <- MDF[, c('Gender', 'Age', 'Cough', 'Fever', 'Active Breathing Shortness', 'Weight Loss', 'Haemoptysis', 'TB Medication History', 'qXRv2', 'Xpert2Outcome_num')]
names(MDF)
ML <- MDF[, c('Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv2', 'Xpert2Outcome_num')]
write.csv(ML, "DataWrangling/ML_python.csv", row.names = F)
write.csv(ML_CAD, "DataWrangling/ML_CAD.csv", row.names = F)
source('C:/Users/zhizh/OneDrive - Stop TB Partnership/UNOPS/10 Paper Writing/CAR software/02 Bangladesh/MachineBGD/DataWrangling/GlobalOption.R', echo=TRUE)
ML_CAD <- MDF[, c('Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'CAD4TB6', 'Xpert2Outcome_num')]
write.csv(ML_CAD, "DataWrangling/ML_CAD.csv", row.names = F)
names(MDF)
ML <- MDF[, c('Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv2', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv2_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv2_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv2_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv2_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
ML <- MDF[, c('Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv2', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_CAD <- MDF[, c('Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'CAD4TB6', 'Xpert2Outcome_num')]
write.csv(ML, "DataWrangling/ML.csv", row.names = F)
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv2_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv2_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv2_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv2_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
ML <- MDF[, c('Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv2', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_CAD <- MDF[, c('Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'CAD4TB6', 'Xpert2Outcome_num')]
# write.csv(ML, "DataWrangling/ML.csv", row.names = F)
23566*0.8
ML_training <- ML[sample(nrow(ML), 18853), ]
ML <- MDF[, c('PID_OMRS', 'Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv2', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
# ML_CAD <- MDF[, c('Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'CAD4TB6', 'Xpert2Outcome_num')]
write.csv(ML, "DataWrangling/ML.csv", row.names = F)
ML_training <- ML[sample(nrow(ML), 18853), ]
ML_testing <- subset(ML, !(ML_training$PID_OMRS %in% ML$PID_OMRS))
ML_testing <- subset(ML, !(ML$PID_OMRS %in% ML_training$PID_OMRS))
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
library(ggplot2)
library(scales)
library(epiR)
library(ggthemes)
library(RColorBrewer)
library(plyr)
library(reshape2)
library(pROC)
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)
library(plotROC)
library(flextable)
library(DataExplorer)
library("readxl")
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
MDF <- read.csv("DataWrangling/MDF.csv")
MDF <- MDF[!MDF$UseCase %in% c("Community screening", "Contacts"), ]
sum(is.na(MDF$GXP.Result)==T)
MDF <- MDF[is.na(MDF$Radiology.Result)==F, ]
MDF <- MDF[MDF$Age >=15, ]
# Make it long
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv2_100, IF1_100, IF2_100)
# MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv2_100, LunitScore_100, JF1_100, JF2_100, IF1_100, IF2_100, IF3_100)
MDF_long <- gather(MDF, DeepLearningSystem, AbnormalityScore, CAD4TB6, qXRv2_100, LunitScore_100, JF1_100, IF2_100)
MDF_long$DeepLearningSystem <- as.character(MDF_long$DeepLearningSystem)
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF2_100"] <- "InferReadDR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "LunitScore_100"] <- "Lunit INSIGHT CXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "CAD4TB6"] <- "CAD4TB"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "qXRv2_100"] <- "qXR"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF1_100"] <- "JF CXR-1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "JF2_100"] <- "JF2"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF1_100"] <- "IF1"
MDF_long$DeepLearningSystem[MDF_long$DeepLearningSystem %in% "IF3_100"] <- "IF3"
MDF_long$Xpert2Outcome_num <- as.factor(MDF_long$Xpert2Outcome_num)
MDF_long$XpertHistory <- ""
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "0"] <- "Bac Neg - with TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "No" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - no TB History"
MDF_long$XpertHistory[MDF_long$TB.Medication.History %in% "Yes" & MDF_long$Xpert2Outcome_num %in% "1"] <- "Bac Pos - with TB History"
ML <- MDF[, c('PID_OMRS', 'Gender', 'Age', 'Cough', 'Fever', 'Active.Breathing.Shortness', 'Weight.Loss', 'Haemoptysis', 'TB.Medication.History', 'qXRv2', 'CAD4TB6', 'JF1', 'IF2','Xpert2Outcome_num')]
ML_training <- ML[sample(nrow(ML), 18853), ]
ML_testing <- subset(ML, !(ML$PID_OMRS %in% ML_training$PID_OMRS))
write.csv(ML, "DataWrangling/ML.csv", row.names = F)
write.csv(ML_training, "DataWrangling/ML_training.csv", row.names = F)
write.csv(ML_testing, "DataWrangling/ML_testing.csv", row.names = F)
1/40
