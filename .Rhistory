tiff("Results/Histogram.tif", width = 14, height = 8, units = "in", res = 100)
hist
dev.off()
## Density plot
p <- ggplot(MDF_long,aes(x=AbnormalityScore, fill=XpertHistory,))+ geom_histogram(position = 'stack', alpha=0.5, breaks=seq(0,100, by=5), aes(y = ..density.., fill = XpertHistory)) + xlab("Abnormality Scores of the AI products")
density <- p + facet_wrap(~DeepLearningSystem) + theme_minimal() + theme(legend.position = "bottom") +scale_fill_manual(values=c("#f7f7f7", "#fbb4b9", "#91003f", "#a1dab4", "#006d2c"))+ scale_x_continuous(minor_breaks = seq(0 , 100, 10), breaks = seq(0 , 100, 10))
density
tiff("Results/density.tif", width = 10, height = 6, units = "in", res = 100)
density
dev.off()
# New_long <- MDF_long[MDF_long$TB.Medication.History %in% "No",]
# Old_long <- MDF_long[MDF_long$TB.Medication.History %in% "Yes",]
#
# p <- ggplot(New_long,aes(x=AbnormalityScore, fill=Xpert2Outcome_num))+ geom_histogram(position = 'stack', alpha=0.5, breaks=seq(0,100, by=5), aes(y = ..count.., fill = Xpert2Outcome_num)) + xlab("Abnormality Scores of the Deep Learning Systems") + scale_fill_discrete(name ="", labels = c("Xpert Negative", "Xpert Positive"))
# hist_New <- p + facet_wrap(~DeepLearningSystem) + theme_minimal() + theme(legend.position = "top")+ scale_color_brewer(palette="Accent")
# # + geom_density(alpha=.4)
#
# tiff("Results/Histogram New.tif", width = 14, height = 8, units = "in", res = 100)
# hist_New
# dev.off()
#
# p <- ggplot(Old_long,aes(x=AbnormalityScore, fill=Xpert2Outcome_num))+ geom_histogram(position = 'stack', alpha=0.5, breaks=seq(0,100, by=5), aes(y = ..count.., fill = Xpert2Outcome_num)) + xlab("Abnormality Scores of the Deep Learning Systems") + scale_fill_discrete(name ="", labels = c("Xpert Negative", "Xpert Positive"))
# hist_Old <- p + facet_wrap(~DeepLearningSystem) + theme_minimal() + theme(legend.position = "top")+ scale_color_brewer(palette="Accent")
# # + geom_density(alpha=.4)
#
# tiff("Results/Histogram Old.tif", width = 14, height = 8, units = "in", res = 100)
# hist_Old
# dev.off()
library(moments)
library(scales)
print("Xpert Positive vs Negative")
paste(colnames(MDF)[27], ": ",round(skewness(MDF[MDF$Xpert2Outcome_num ==1, 27]),4), "vs", round(skewness(MDF[MDF$Xpert2Outcome_num ==0, 27]),4))
paste(colnames(MDF)[28], ": ",round(skewness(MDF[MDF$Xpert2Outcome_num ==1, 28]),4), "vs", round(skewness(MDF[MDF$Xpert2Outcome_num ==0, 28]),4))
paste(colnames(MDF)[29], ": ",round(skewness(MDF[MDF$Xpert2Outcome_num ==1, 29]),4), "vs", round(skewness(MDF[MDF$Xpert2Outcome_num ==0, 29]),4))
paste(colnames(MDF)[30], ": ",round(skewness(MDF[MDF$Xpert2Outcome_num ==1, 30]),4), "vs", round(skewness(MDF[MDF$Xpert2Outcome_num ==0, 30]),4))
paste(colnames(MDF)[31], ": ",round(skewness(MDF[MDF$Xpert2Outcome_num ==1, 31]),4), "vs", round(skewness(MDF[MDF$Xpert2Outcome_num ==0, 31]),4))
paste(colnames(MDF)[32], ": ",round(skewness(MDF[MDF$Xpert2Outcome_num ==1, 32]),4), "vs", round(skewness(MDF[MDF$Xpert2Outcome_num ==0, 32]),4))
paste(colnames(MDF)[33], ": ",round(skewness(MDF[MDF$Xpert2Outcome_num ==1, 33]),4), "vs", round(skewness(MDF[MDF$Xpert2Outcome_num ==0, 33]),4))
# Mode(MDF[MDF$Xpert2Outcome_num ==1, 28])
names(MDF)
paste(colnames(MDF)[23], ": ",round(skewness(MDF[MDF$Xpert2Outcome_num ==1, 23]),4), "vs", round(skewness(MDF[MDF$Xpert2Outcome_num ==0, 23]),4))
density
paste(colnames(MDF)[32], ": ",round(skewness(MDF[MDF$Xpert2Outcome_num ==1, 32]),4), "vs", round(skewness(MDF[MDF$Xpert2Outcome_num ==0, 32]),4))
source("DataWrangling/GlobalOption.R")
source("radiologist.R")
Radiologist <- Radiologist[Radiologist$Referral %in% "MDF", ]
New <- MDF[MDF$TB.Medication.History %in% "No",]
Old <- MDF[MDF$TB.Medication.History %in% "Yes",]
Female <- MDF[MDF$Gender %in% "F", ]
Male <- MDF[MDF$Gender %in% "M", ]
Young <- MDF[MDF$AgeGroup %in% "[15,25)",]
Middle <- MDF[MDF$AgeGroup %in% "[25,60)",]
Senior <- MDF[MDF$AgeGroup %in% "[60,108]",]
Referral <- subset(MDF, MDF$UseCase %in% "PrivatePublicReferral")
DOTS <- subset(MDF, MDF$UseCase %in% "PublicDOTSRetesting")
WalkIn <- subset(MDF, MDF$UseCase %in% "WalkIn")
# Missing <- subset(MDF, is.na(MDF$UseCase)==T)
New_long <- MDF_long[MDF_long$TB.Medication.History %in% "No",]
Old_long <- MDF_long[MDF_long$TB.Medication.History %in% "Yes",]
Young_long <- MDF_long[MDF_long$AgeGroup %in% "[15,25)",]
Middle_long <- MDF_long[MDF_long$AgeGroup %in% "[25,60)",]
Senior_long <- MDF_long[MDF_long$AgeGroup %in% "[60,108]",]
Referral_long  <- subset(MDF_long, MDF_long$UseCase %in% "PrivatePublicReferral")
DOTS_long  <- subset(MDF_long, MDF_long$UseCase %in% "PublicDOTSRetesting")
WalkIn_long  <- subset(MDF_long, MDF_long$UseCase %in% "WalkIn")
## All
library(precrec)
library(ggplot2)
ROCPRC <- function(dataset){
attr <- attributes(evalmod(scores = dataset$CAD4TB6, labels = dataset$Xpert2Outcome_num))
aucT1 <- c("CAD4TB ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$qXRv3, labels = dataset$Xpert2Outcome_num))
aucT2 <- c("qXR ", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$LunitScore, labels = dataset$Xpert2Outcome_num))
aucT3 <- c("Lunit INSIGHT CXR", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$JF1, labels = dataset$Xpert2Outcome_num))
aucT4 <- c("JF CXR-1", round(attr$auc[4],3))
attr <- attributes(evalmod(scores = dataset$IF2, labels = dataset$Xpert2Outcome_num))
aucT5 <- c("InferReadDR ", round(attr$auc[4],3))
# return(mmcurves)
# return(autoplot(mmcurves))
aucT <- c(aucT1, aucT2, aucT3, aucT4, aucT5)
return(aucT)
}
l <- ROCPRC(MDF)
all <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
all$subgroup <- "all"
## New only
l <- ROCPRC(New)
New <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
New$subgroup <- "New cases"
## Old only
l <- ROCPRC(Old)
Old <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Old$subgroup <- "Previously treated cases"
## Young
l <- ROCPRC(Young)
Young <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Young$subgroup <- "Young age"
## Middle
l <- ROCPRC(Middle)
Middle <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Middle$subgroup <- "Middle age"
## Senior
l <- ROCPRC(Senior)
Senior <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Senior$subgroup <- "Old age"
## Referral only
l <- ROCPRC(Referral)
Referral <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Referral$subgroup <- "Referred"
## DOTS only
l <- ROCPRC(DOTS)
DOTS <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
DOTS$subgroup <- "DOTS retested"
## Walk-in only
l <- ROCPRC(WalkIn)
WalkIn <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
WalkIn$subgroup <- "WalkIn"
## Female
l <- ROCPRC(Female)
Female <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Female$subgroup <- "Female"
## Male
l <- ROCPRC(Male)
Male <- data.frame(matrix(unlist(l), nrow=5, byrow=T))
Male$subgroup <- "Male"
#### stratification by age AND prior TB history
aucTable <- rbind(all, New, Old, Young, Middle, Senior, Referral, DOTS, WalkIn, Female, Male)
colnames(aucTable) <- c("AI.Algorithm", "AUC", "PCAUC", "Subgroup")
write.csv(aucTable, "Results/aucTable.csv")
rm(list=(ls()))
aucTable <- read.csv("Results/aucTable.csv")
aucTable <- aucTable[, -1]
aucTable$Subgroup <- factor(aucTable$Subgroup, levels = c("Young age", "Middle age", "Old age", "Referred", "DOTS retested", "WalkIn", "New cases", "Previously treated cases", "Female", "Male"))
### AUC
age<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
referral<-ggplot(aucTable[aucTable$Subgroup %in% c("Referred", "DOTS retested", "WalkIn"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
history<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
gender <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=AUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
### PRC
agePC<-ggplot(aucTable[aucTable$Subgroup %in% c("Young age", "Middle age", "Old age"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) +  geom_bar(stat="identity", width=0.6, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
referralPC<-ggplot(aucTable[aucTable$Subgroup %in% c("Referred", "DOTS retested", "WalkIn"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.7, position=position_dodge())+theme_minimal()+ theme(legend.position = "top")+  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
historyPC<-ggplot(aucTable[aucTable$Subgroup %in% c("New cases", "Previously treated cases"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0.3, 0.8) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.8, 0.05), breaks = seq(0.3, 0.8, 0.05))
genderPC <- ggplot(aucTable[aucTable$Subgroup %in% c("Female", "Male"), ], aes(x=AI.Algorithm, y=PCAUC, fill=Subgroup)) + geom_bar(stat="identity", width=0.5, position=position_dodge())+theme_minimal() + theme(legend.position = "top") +  ylim(0, 0.95) + theme(panel.grid.minor = element_line(size=0.5)) + scale_y_continuous(minor_breaks = seq(0 , 0.95, 0.05), breaks = seq(0.65, 0.95, 0.05))
tiff("Results/PRC ROC AUC plot.tif", width = 18, height = 8, units = "in", res = 100)
require(gridExtra)
grid.arrange(age, referral, history, gender, agePC, referralPC, historyPC, genderPC, ncol=4)
# grid.arrange(age, referral, history, ncol=3)
dev.off()
# rm(age, referral, history, agePC, referralPC, historyPC, gender, genderPC)
tiff("Results/PRC AUC plot.tif", width = 9, height = 8, units = "in", res = 100)
grid.arrange(agePC, referralPC, historyPC, genderPC, ncol=2)
dev.off()
source("DataWrangling/GlobalOption.R")
MDF$qXRv3 <- MDF$qXRv3*100
MDF$LunitScore <- MDF$LunitScore*100
MDF$IF2 <- MDF$IF2*100
MDF$JF1 <- MDF$JF1*100
# MDF <- subset(MDF, MDF$Age > 15)
library(tableone)
# Define numeric variables
listVar <- c("Age", "AgeGroup", "Gender", "Cough", "Fever", "Active.Breathing.Shortness", "Weight.Loss","Haemoptysis", "Symptoms", "TB.Medication.History", "Xpert2Outcome_num", "MTB.Burden", "RIF.Result", "UseCase", "rad.highly.TB", "rad.TB", "rad.abn", "CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2")
#Define categorical variables
catVars <- c( "AgeGroup", "Gender", "Cough", "Fever", "Active.Breathing.Shortness", "Weight.Loss","Haemoptysis", "Symptoms", "TB.Medication.History", "Xpert2Outcome_num", "MTB.Burden", "RIF.Result", "UseCase", "rad.highly.TB", "rad.TB", "rad.abn")
table1 <- CreateTableOne(vars = listVar, strata=c("Xpert2Outcome_num"), data = MDF, factorVars = catVars)
tableType <- CreateTableOne(vars = listVar, strata=c("UseCase"), data = MDF, factorVars = catVars)
table1.all <- CreateTableOne(vars = listVar, data = MDF, factorVars = catVars)
table1 <- print(table1, nonnormal = c("Age", "CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2"), cramVars = "Gender", catDigits = 1, contDigits = 1, noSpaces = TRUE)
tabletype <- print(tableType, nonnormal = c("Age", "CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2"), cramVars = "Gender", catDigits = 1, contDigits = 1, noSpaces = TRUE)
table1all <- print(table1.all, nonnormal = c("Age","CAD4TB6", "qXRv3", "LunitScore", "JF1", "IF1", "IF2"), cramVars = "Gender", catDigits = 1, contDigits = 1, noSpaces = TRUE)
table1DF <- data.frame(columnNameILike = row.names(table1), table1)
table1allDF <- data.frame(columnNameILike = row.names(table1all), table1all)
tabletypeDF <- data.frame(columnNameILike = row.names(tabletype), tabletype)
T1 <- cbind(table1DF, table1allDF, tabletypeDF)
# T1 <- T1[, c(1, 3, 2, 4, 7)]
# colnames(T1) <- c("", "Xpert Positive", "Xpert Negative", "p test", "Overall")
T1 <- T1[, c(1, 3, 2, 4, 7, 9:12)]
colnames(T1) <- c("", "Xpert Positive", "Xpert Negative", "p test", "Overall", "Private&Public Referral", "Public DOTS Retesting", "WalkIn")
TEMP <- scan(text = "n,Age (median [IQR]),Gender = F/M (%),Cough = Yes (%),Fever = Yes (%),Short of breath = Yes (%),Weight Loss = Yes (%),Haemoptysis = Yes (%),Any symptom(s) = Yes (%),TB History = Yes (%),Xpert positive (%),MTB Burden (%), High,   Low,   Medium,   Very Low,RIF Result (%), Detected,   Indeterminate,   Not Detected, Use Case (%),   Private&Public Referral,   Public DOTS Retesting,   Walk-in, Radiologist = Highly suggestive of TB (%),Radiologist = Possibly TB (%),Radiologist = Any abnormality (%),CAD4TB (median [IQR]),qXR (median [IQR]),Lunit INSIGHT CXR (median [IQR]),JF CXR-1 (median [IQR]), IF1 (median [IQR]), InferReadDR (median [IQR])", sep = ",", what = "")
T1$N <- TEMP
T1 <- T1[, c(10, 2,3, 5:8)]
rm(TEMP)
write.csv(T1, "Results/Table 1.csv", row.names = FALSE)
knitr::kable(T1, row.names = FALSE, caption = "Table 1 Demographic and Clinical Characteristics of People Screened with Chest X-ray and Xpert MTB/RIF")
rm(table1.all, table1all, table1allDF, table1, table1DF, tabletype, tabletypeDF, tableType, listVar, catVars)
source("radiologist.R")
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_lunit.csv")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8:11)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
write.csv(humanAI, "Results/humanAI.csv", row.names = F)
rm(AI, Human)
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3")
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8:11)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
write.csv(humanAI, "Results/humanAI.csv", row.names = F)
rm(AI, Human)
source("radiologist.R")
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8:11)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
write.csv(humanAI, "Results/humanAI.csv", row.names = F)
# rm(AI, Human)
source("radiologist.R")
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8:11)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
# write.csv(humanAI, "Results/humanAI.csv", row.names = F)
# rm(AI, Human)
names(humanAI)
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI
View(humanAI)
View(humanAI)
names(humanAI)
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
View(humanAI)
write.csv(humanAI, "Results/humanAI.csv", row.names = F)
names(AI)
View(AI)
names(CAD_Xpert_plot)
CAD_Xpert_plot[,28]
names(AI)
names(CAD_Xpert_plot)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18,27,28)]
View(AI)
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
write.csv(humanAI, "Results/humanAI.csv", row.names = F)
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18,27,28)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18,27,28)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,4, 5, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
View(Human)
View(humanAI)
names(AI)
AI
source("radiologist.R")
########### Human vs AI ####################
CAD_Xpert_plot <- read.csv("Results/CAD_Xpert_CAD6.3.csv")
CAD_Xpert_plot <- subset(CAD_Xpert_plot, CAD_Xpert_plot$Site %in% "BGD")
# knitr::kable(Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11)])
Human <- Radiologist[(Radiologist$Referral %in% "MDF"), c(8, 10, 11, 4)]
Human <- Human[c(3,2,1), ]
Human <- rbind(Human, Human, Human, Human, Human)
AI <- CAD_Xpert_plot[CAD_Xpert_plot$Comment !="" , c(17, 14, 4, 24, 25, 18,27,28)]
AI$Subject <- paste(AI$DeepLearningSystem, AI$Comment)
require(data.table)
AI <- as.data.table(AI)
# # knitr::kable(AI[AI[, .I[which.max(Spec)], by=Subject]$V1])
AI <- AI[AI[, .I[which.max(Spec)], by=Subject]$V1]
AI <- AI[grep("Radiologists' ", AI$Comment), ]
humanAI <- cbind(Human, AI[, c(1,2,7,8, 3)])
humanAI$Diff <- percent(humanAI[, 9]- humanAI[, 4])
humanAI <- humanAI[, c(1,2,3,5:8, 10, 9,4)]
colnames(humanAI) <- c("Human Benchmark", "Sensitivity", "Specificy", "DL Product", "Score", "DL Sensitivity", "DL Specificity", "Difference", "specAI", "specH")
### McNemar test specificity
healthy <- sum(MDF$Xpert2Outcome_num %in% "0")
# library(readr)
# humanAI <- read_csv("Results/humanAI.csv",
#                     col_types = cols(`Diff.specificity` = col_number()))
humanAI$CI <- ""
for (i in 1:15){
test <- prop.test(x=c(humanAI$specAI[i]*healthy, healthy*humanAI$specH[i]), n=c(healthy, healthy))
humanAI$CI[i] <- paste0(percent(test$conf.int[1], suffix = ""), "-", percent(test$conf.int[2]))
# return(humanAI)
}
humanAI$SpecificyIncrease <- paste0(humanAI$Difference, " (", humanAI$CI, ")")
humanAI <- humanAI[c(3,6,9,12,15, 2,5,8,11,14, 1,4,7,10,13), -c(6, 8)]
humanAI[2:5, 1:3] <- " "
humanAI[7:10, 1:3] <- " "
humanAI[12:15, 1:3] <- " "
write.csv(humanAI, "Results/humanAI.csv", row.names = F)
# rm(AI, Human)
View(humanAI)
